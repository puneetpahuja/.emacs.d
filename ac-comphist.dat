((("substr" .
   [1 0 0 0 0 0])
  ("pwd" .
   [2 0 0])
  ("echo" .
   [2 0 0 0])
  ("programs" .
   [2 0 0 0 0 0 0 0])
  ("output-filename-parts" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("str/join" .
   [1 0 0 0 0 0 0 0])
  ("output-file" .
   [1 0 0 0 1 0 0 0 0 0 0])
  ("vec" .
   [1 0 0])
  ("butlast" .
   [2 0 0 0 0 0 2])
  ("input-filename-parts" .
   [0 0 0 0 0 0 1 0 0 0 0 2 0 0 0 0 0 0 0 0])
  ("input-file" .
   [1 0 0 0 0 0 0 0 0 1])
  ("str/split" .
   [0 0 0 0 0 0 0 0 1])
  (":if" .
   [2 0 0])
  ("false" .
   [1 0 0 0 0])
  ("%2" .
   [1 0])
  ("%1" .
   [1 0])
  ("result" .
   [1 0 0 0 0 0])
  ("forms" .
   [2 0 0 0 0])
  ("form-is?" .
   [1 0 0 0 0 0 0 0])
  (":return" .
   [2 0 0 0 0 0 0])
  (":fn" .
   [1 0 0])
  (":var" .
   [1 0 0 0])
  ("get-fn-call" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("get-form" .
   [1 0 0 0 0 0 0 0])
  (":map-property" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0])
  ("get-exp" .
   [0 0 0 0 0 1 0])
  ("contains?" .
   [0 0 0 0 0 0 0 1 0])
  ("fn-call?" .
   [1 0 0 0 0 0 0 0])
  ("operator?" .
   [1 0 0 0 0 0 0 0 0])
  ("vec?" .
   [1 0 0 0])
  ("ve" .
   [2 0])
  ("def?" .
   [1 0 0 0])
  ("you" .
   [2 0 0])
  ("expands" .
   [1 0 0 0 0 0 0])
  ("generator" .
   [0 0 0 0 0 0 0 0 1])
  ("support" .
   [1 0 0 0 0 0 0])
  ("macro" .
   [2 0 0 0 0])
  ("expression" .
   [1 0 0 0 0 0 0 0 0 0])
  ("it" .
   [2 0])
  ("wrap" .
   [1 0 0 0])
  ("do" .
   [2 0])
  ("is" .
   [1 0])
  ("check" .
   [2 0 0 0 0])
  ("get-operator" .
   [0 0 0 0 0 0 0 1 0 0 0 0])
  ("an" .
   [4 0])
  ("parent" .
   [9 0 0 0 0 0])
  ("ast" .
   [2 0 0])
  ("get-ast" .
   [1 0 0 0 0 0 0])
  ("pprint/pprint" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("p" .
   [1])
  (":refer" .
   [1 0 0 0 0 0])
  ("pprint" .
   [1 0 0 0 0 0])
  ("indent.indent" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("with" .
   [1 0 0 0])
  (":only" .
   [1 0 0 0 0])
  ("println" .
   [5 0 1 0 0 0 0])
  ("function" .
   [2 0 0 0 0 0 0 1])
  ("lucky-number" .
   [0 0 0 2 1 0 0 0 0 0 0 0])
  ("conj" .
   [2 0 0 0])
  ("addition-list" .
   [0 0 0 0 2 0 0 0 0 0 0 0 1])
  ("eval" .
   [4 0 0 0])
  ("backwards" .
   [0 0 0 0 1 0 0 0 1])
  ("form" .
   [6 0 0 0])
  ("reverse" .
   [1 0 0 0 0 0 0])
  ("defmacro" .
   [1 0 0 0 0 0 0 0])
  ("f" .
   [1])
  ("initial-board" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0])
  ("rows" .
   [2 0 0 0])
  ("add-pos" .
   [1 0 0 0 0 0 1])
  ("connect-right" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("pegged-board" .
   [0 0 0 0 0 1 0 0 0 0 0 0])
  ("connection-creation-fn" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("connect-down-right" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("connect-down-left" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0])
  ("connect-down-" .
   [0 0 0 0 0 0 0 0 0 0 0 0 2])
  ("row" .
   [5 0 0])
  ("connect" .
   [3 0 0 0 0 0 1])
  ("max-pos" .
   [6 0 2 0 0 2 1])
  (":as" .
   [0 0 1])
  ("keyword" .
   [1 0 0 0 0 0 0])
  ("board" .
   [11 0 0 0 2])
  ("neighbor" .
   [0 0 0 7 0 0 0 4])
  ("p2" .
   [1 0])
  ("p1" .
   [1 0])
  ("new-board" .
   [0 0 0 0 1 1 2 0 1])
  ("true" .
   [1 0 0 0])
  ("expressions" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("of" .
   [2 0])
  ("s" .
   [1])
  ("to" .
   [1 0])
  ("the" .
   [5 0 0])
  ("nil" .
   [5 0 0])
  ("true?" .
   [0 0 0 0 1])
  ("str" .
   [6 0 0])
  ("value" .
   [1 0 0 0 0])
  ("get-js-def-init" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("remainder" .
   [0 0 0 0 1 1 1 0 0])
  ("code" .
   [3 0 0 0])
  ("m-parse-expression" .
   [0 0 0 0 0 1 0 1 0 2 1 0 0 0 0 0 0 2])
  ("exp" .
   [18 0 0])
  ("tree" .
   [4 0 0 0])
  ("t" .
   [2])
  ("-main" .
   [2 0 0 0 0])
  ("find-macro" .
   [0 0 0 0 0 0 0 1 1 0])
  ("c" .
   [2])
  ("in" .
   [8 0])
  ("Macro" .
   [0 0 0 0 1])
  ("new-map" .
   [2 0 0 0 0 0 1])
  ("key" .
   [2 0 0])
  ("val" .
   [3 0 0])
  ("assoc" .
   [2 0 0 0 0])
  (":human" .
   [1 0 0 0 0 0])
  (":critter" .
   [1 0 0 0 0 0 0 0])
  ("take" .
   [5 0 0 0])
  ("drop" .
   [2 0 0 0])
  ("take-while" .
   [0 0 0 0 0 0 1 0 0 1])
  ("odd?" .
   [0 0 0 2])
  ("odd" .
   [2 0 0])
  ("some" .
   [1 0 0 0])
  ("and" .
   [1 0 0])
  ("sort" .
   [3 0 0 0])
  ("sort-by" .
   [1 0 0 0 0 0 0])
  ("count" .
   [1 0 0 0 0])
  ("concat" .
   [3 0 0 0 0 0])
  ("aaaa" .
   [1 0 0 0])
  ("clojure-parser.core" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("def" .
   [38 0 0])
  ("ge" .
   [9 0])
  ("use" .
   [1 0 0])
  ("clojure-parser.ast-converter" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0])
  ("domonad" .
   [1 0 0 1 1 0 0])
  ("match-one" .
   [4 0 0 0 0 0 0 0 0])
  ("parse-string" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  ("parse-number" .
   [0 0 0 0 0 0 0 0 0 1 0 0])
  ("parse-boolean" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("n" .
   [1])
  ("literal" .
   [0 0 0 0 1 0 1])
  ("m-parse-" .
   [0 0 0 0 0 0 0 1])
  ("m-parse-multi-expression" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("skip-one-or-more" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2])
  ("Parser" .
   [0 0 0 0 0 1])
  ("parse-space" .
   [0 0 0 0 0 0 0 0 0 2 0])
  ("parse-newline" .
   [0 0 0 0 0 0 0 0 2 0 0 0 0])
  (":program" .
   [1 0 0 0 0 0 0 0])
  (">=" .
   [1 0])
  ("tri" .
   [3 0 0])
  ("triangular?" .
   [0 0 0 0 1 0 0 0 0 0 2])
  ("row-tri" .
   [1 0 0 1 0 0 0])
  ("pos" .
   [20 0 0])
  ("row-num" .
   [2 0 0 1 0 0 0])
  ("if" .
   [4 0])
  ("<=" .
   [1 0])
  ("destination" .
   [0 0 0 0 3 1 0 0 0 0 5])
  ("max-key" .
   [0 0 0 0 0 0 1])
  ("my.lib" .
   [0 0 1 0 0 0])
  ("ks" .
   [8 0])
  ("my-assoc-in" .
   [3 0 0 0 0 0 0 0 0 0 1])
  ("character" .
   [3 0 0 0 0 0 0 0 1])
  (":attributes" .
   [1 0 0 0 0 0 0 0 0 0 2])
  (":strength" .
   [1 0 0 0 0 0 0 0 1])
  ("ch5.core" .
   [0 0 1 1 0 0 0 1])
  ("ch5.core/attr" .
   [0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("assoc-in" .
   [1 0 0 0 0 0 0 0])
  ("m" .
   [1])
  ("update-in" .
   [2 0 1 0 0 0 0 0 0])
  (":a" .
   [1 0])
  ("update" .
   [1 0 0 0 0 0])
  (":intelligence" .
   [1 0 0 0 0 0 0 0 0 0 0 1 0])
  ("list" .
   [4 0 0 0])
  ("args" .
   [12 0 0 0])
  ("my-update-in" .
   [0 0 0 0 0 0 0 0 0 0 0 1])
  ("apply" .
   [1 0 0 0 0])
  ("clojure.tools.trace" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("clojure.tools.trace/trace-ns" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("seq" .
   [2 0 0])
  ("ansi" .
   [6 0 0 0])
  (":blue" .
   [3 0 0 0 0])
  (":reset" .
   [3 0 0 0 0 0])
  (":red" .
   [2 0 0 0])
  (":green" .
   [2 0 0 0 0 0])
  ("clojure-parser.utilities" .
   [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("clojure-parser.utilities/if?" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  (":nil" .
   [1 0 0 0])
  ("factorial" .
   [1 0 0 0 0 0 0 0 0])
  ("js-ast-json" .
   [2 0 0 0 0 0 0 0 0 0 0])
  ("v" .
   [1])
  ("names" .
   [1 0 0 0 0])
  ("js" .
   [2 0])
  ("will" .
   [1 0 0 0])
  ("require" .
   [0 0 0 2 0 0 0])
  ("args-new" .
   [2 0 0 0 0 0 0 0])
  ("pirate_phrases" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("public" .
   [0 0 1 1 0 0])
  ("PiratePhrases" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("static" .
   [0 0 0 1 0 0])
  ("void" .
   [0 0 1 0])
  ("main" .
   [1 0 0 0])
  ("String" .
   [0 0 0 1 0 0])
  ("Greetings" .
   [1 0 0 0 3 0 0 0 0])
  ("greetings" .
   [2 0 0 0 0 0 0 0 0])
  ("hello" .
   [1 0 0 0 0])
  ("Farewells" .
   [0 0 0 0 2 0 1 0 0])
  ("farewells" .
   [1 0 0 0 1 0 0 0 0])
  ("goodbye" .
   [0 0 0 0 1 0 0])
  ("System" .
   [0 0 0 0 1 0])
  ("out" .
   [1 0 0])
  ("if?" .
   [1 0 1])))
