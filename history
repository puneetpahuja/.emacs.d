;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(compile-history bookmark-history helm-file-name-history coding-system-history query-replace-history minibuffer-history-search-history file-name-history extended-command-history heroku-command-hist heroku-app-hist read-expression-history magit-revision-history cider-minibuffer-history search-ring buffer-name-history ido-buffer-history face-name-history helm-M-x-input-history minibuffer-history helm-occur-history))
(setq bookmark-history '("proj" "Helm-find-files: ~/code/work/controlroom/controlroom-dummy-api/"))
(setq helm-file-name-history '("init.el" ".emacs~" "project.clj" "datomic_tx_generator.clj" "datomic_testdata_generator.clj" "schema.clj" "datomic_schema_generator.clj" "project.clj" "COMMIT_EDITMSG" "COMMIT_EDITMSG" "bst.hs" "COMMIT_EDITMSG" "scratch.hs" "repl-dump" "put-task-payload" "io.clj" "handler.clj" ".bash_aliases" "exercises.hs" "cipher.hs" "COMMIT_EDITMSG" "COMMIT_EDITMSG" "COMMIT_EDITMSG" "examples.hs" "COMMIT_EDITMSG" "run_docker_container.sh" "COMMIT_EDITMSG" "data.clj" "COMMIT_EDITMSG" "exercises.hs" "test.hs" "exercises.hs" "COMMIT_EDITMSG" "MERGE_MSG" "COMMIT_EDITMSG" "Dockerfile" "build_docker_image.sh" "auth.clj" "COMMIT_EDITMSG" "db_schema.clj" "COMMIT_EDITMSG" "transaction_schema.clj" "COMMIT_EDITMSG" ".keep_this_file_here_for_git" "COMMIT_EDITMSG" ".gitignore" "COMMIT_EDITMSG" "COMMIT_EDITMSG" "core.clj" "utils.clj" "manual_schema.clj" "dummy.dtm" "COMMIT_EDITMSG" "COMMIT_EDITMSG" "hih.dtm" "project.clj" "core.clj" "COMMIT_EDITMSG" "README.md" "auth.clj" "schema-core.dtm" "project.clj" "toy_schema.dtm" "db.clj" "user_schema.dtm" "data.clj" "COMMIT_EDITMSG" "data.clj" "project.clj" "handler.clj" "handler.clj" "README.md" "ast_generator.clj" "indent.clj" "core.clj" "api_dataweave.clj" "COMMIT_EDITMSG" "project.clj" "core.clj" "schema.dtm" "project.clj" "db_test.clj" "db_test.clj" "handler.clj" "sql-transactor.properties" "credentials.clj" "sql-transactor.properties" "db.clj" "sql-transactor-template.properties" "core.cljs" "whip.js" "index.html" "Dockerfile" "project.clj" "core.clj" "server.clj" "core.clj" "project.clj" "openresty.conf" "nginx.conf"))
(setq coding-system-history '("utf-8-hfs" "utf-8-hfs-dos" "utf-8" "chinese-iso-8bit" "th-tis620"))
(setq query-replace-history '(" \"" "\"" "\"" "," "
" "
" "\\n" "\\n" "," "\\\\n" "\\\\n" "," "\\n" "\\n" "," " =" " =" " ," " ," "= " "= " "element'" "val" "val" "" "task/" "task/" "entity-id" "entity" "entity" "first-child" "sibling" "sibling" "^:" ":^" ":^" "g/gen-uuid" "gen-uuid" "gen-uuid" ":defaultValue " ":value " ":value " ":defaultValue" ":value" ":value" ":valueType" ":type" ":type" ":value" ":value" "true" "\"yes\"" "\"yes\"" "auth" "credentials" "credentials"))
(setq file-name-history '("/home/puneet/code/work/controlroom/controlroom-api-poc/.git/COMMIT_EDITMSG" "~/code/work/controlroom/controlroom-api-poc/src/dtm/util.clj" "~/code/work/controlroom/controlroom-api-poc/src/debug/trace.clj" "~/code/work/controlroom/controlroom-api-poc/src/dtm/convert.clj" "~/code/work/controlroom/controlroom-api-poc/src/dtm/read.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/.git/COMMIT_EDITMSG" "~/code/work/controlroom/controlroom-api-poc/src/dtm/auth.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/.git/COMMIT_EDITMSG" "~/code/work/controlroom/controlroom-api-poc/src/api/handler.clj" "~/code/work/controlroom/controlroom-api-poc/src/api/auth.clj" "~/code/work/controlroom/controlroom-api-poc/project.clj" "~/code/work/controlroom/controlroom-api-poc/src/datomic/util.clj" "~/code/work/controlroom/controlroom-api-poc/src/datomic/config.clj" "~/code/work/controlroom/controlroom-api-poc/src/datomic/convert.clj" "~/code/haskell_classes/scratch.hs" "~/code/work/controlroom/controlroom-api-poc/src/datomic/auth.clj" "~/code/work/controlroom/controlroom-api-poc/src/api/schema.clj" "/home/puneet/code/work/controlroom/controlroom-dummy-api/.git/COMMIT_EDITMSG" "/home/puneet/code/work/controlroom/controlroom-api-poc/.git/COMMIT_EDITMSG" "~/code/work/controlroom/controlroom-api-poc/README.md" "/home/puneet/code/work/controlroom/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/work/controlroom/controlroom-dummy-api/src/datomic/convert.clj" "~/code/work/controlroom/controlroom-dummy-api/src/controlroom_dummy_api/datomic_engine.clj" "~/code/work/controlroom/controlroom-dummy-api/src/controlroom_dummy_api/auth.clj" "~/code/work/controlroom/controlroom-dummy-api/src/controlroom_dummy_api/datomic_testdata.clj" "~/code/work/controlroom/controlroom-dummy-api/src/controlroom_dummy_api/datomic_schema.clj" "/home/puneet/code/work/controlroom/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/haskell_classes/hamming.hs" "~/code/haskell_classes/numberInWords.hs" "/home/puneet/code/haskell_classes/.git/COMMIT_EDITMSG" "~/code/haskell_classes/bst.hs" "/home/puneet/code/work/controlroom/controlroom-dummy-api/.git/COMMIT_EDITMSG" "/home/puneet/code/work/controlroom/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/work/controlroom/controlroom-dummy-api/src/controlroom_dummy_api/handler.clj" "~/code/work/controlroom/controlroom-dummy-api/src/controlroom_dummy_api/api_schema.clj" "~/code/work/controlroom/controlroom-dummy-api/src/controlroom_dummy_api/io.clj" "~/code/work/controlroom/controlroom-dummy-api/src/data/data.clj" "~/code/work/controlroom/controlroom-dummy-api/src/controlroom_dummy_api/datomic_tx_generator.clj" "~/code/work/controlroom/controlroom-dummy-api/project.clj" "/home/puneet/code/work/controlroom/controlroom-dummy-api/.git/COMMIT_EDITMSG" "/home/puneet/code/haskell_graham_hutton/.git/COMMIT_EDITMSG" "~/code/haskell_graham_hutton/.gitignore" "/home/puneet/code/work/controlroom/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/work/controlroom/controlroom-dummy-api/scratch/datomic/repl-dump.clj" "/home/puneet/code/work/controlroom/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/work/controlroom/controlroom-dummy-api/src/controlroom_dummy_api/datomic_testdata_generator.clj" "~/code/work/controlroom/controlroom-dummy-api/scratch/datomic/repl-dump" "~/.emacs.d/init.el" "~/.emacs~" "~/code/mygram/controlroom-dummy-api/project.clj" "~/code/mygram/controlroom-dummy-api/src/controlroom_dummy_api/datomic_tx_generator.clj" "~/code/mygram/controlroom-dummy-api/src/controlroom_dummy_api/datomic_testdata_generator.clj" "~/code/mygram/controlroom-dummy-api/src/controlroom_dummy_api/schema.clj" "~/code/mygram/controlroom-dummy-api/src/controlroom_dummy_api/datomic_schema_generator.clj" "~/code/mygram/scratch/datomictoy/project.clj" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "/home/puneet/code/haskell-classes/.git/COMMIT_EDITMSG" "~/code/haskell-classes/bst.hs" "/home/puneet/code/haskell-classes/.git/COMMIT_EDITMSG" "~/code/mygram/controlroom-dummy-api/scratch/datomic/repl-dump" "~/code/mygram/controlroom-dummy-api/scratch/put-task-payload" "~/code/mygram/controlroom-dummy-api/src/controlroom_dummy_api/io.clj" "~/code/mygram/controlroom-dummy-api/src/controlroom_dummy_api/handler.clj" "~/.bash_aliases" "~/code/haskell_graham_hutton/ch5/exercises.hs" "~/code/haskell_graham_hutton/ch5/cipher.hs" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "/home/puneet/code/geekskool/haskell_graham_hutton/.git/COMMIT_EDITMSG" "~/code/geekskool/haskell_graham_hutton/ch5/examples.hs" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/mygram/controlroom-dummy-api/run_docker_container.sh" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/mygram/controlroom-dummy-api/src/data/data.clj" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/geekskool/haskell_graham_hutton/ch2/exercises.hs" "~/code/geekskool/haskell_graham_hutton/ch2/test.hs" "~/code/geekskool/haskell_graham_hutton/ch1/exercises.hs" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "/home/puneet/code/mygram/controlroom-dummy-api/.git/MERGE_MSG" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/mygram/controlroom-dummy-api/Dockerfile" "~/code/mygram/controlroom-dummy-api/build_docker_image.sh" "~/code/mygram/controlroom-dummy-api/src/controlroom_dummy_api/auth.clj" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/mygram/controlroom-dummy-api/src/controlroom_dummy_api/db_schema.clj" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/mygram/controlroom-dummy-api/src/controlroom_dummy_api/transaction_schema.clj" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/mygram/controlroom-dummy-api/resources/.keep_this_file_here_for_git" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "~/code/mygram/controlroom-dummy-api/.gitignore" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "/home/puneet/code/mygram/controlroom-datomic-schemas/.git/COMMIT_EDITMSG" "~/code/mygram/datomic-to-schema-core/src/datomic_to_schema_core/core.clj" "~/code/mygram/datomic-to-schema-core/src/datomic_to_schema_core/utils.clj" "~/code/mygram/controlroom-dummy-api/src/controlroom_dummy_api/manual_schema.clj" "~/code/mygram/controlroom-datomic-schemas/dummy.dtm" "/home/puneet/code/mygram/controlroom-dummy-api/.git/COMMIT_EDITMSG" "/home/puneet/code/mygram/controlroom-datomic-schemas/.git/COMMIT_EDITMSG"))
(setq extended-command-history '("cider-restart" "eval-buffer" "haskell-mode" "revert-buffer" "hs-show-all" "hs-show-block" "hs-hide-all" "query-replace-regexp" "pkg-info-package-version" "clojure-mode" "helm-bookmarks" "bookmark-bmenu-list" "replace-regexp" "ansi-term" "term" "goto-line" "paredit-mode" "lockstep-popup" "lockstep" "yank" "cider-load-file" "cider-eval-file" "cider-load-buffer" "helm-find-files" "display-buffer" "haskell-compile" "electric-newline-and-maybe-indent" "newline-and-indent" "kill-buffer" "term-send-ctrl-x" "describe-variable" "customize-mode" "package-install" "haskell-mode-stylish-buffer" "package-refresh-contents" "shell"))
(setq heroku-command-hist '("bash"))
(setq heroku-app-hist '("bestplan"))
(setq read-expression-history '("(setq line-spacing -1.0)" "(setq line-spacing 0.5)"))
(setq magit-revision-history '("origin/org-units" "logout" "org-units" "logout" "master" "origin/logout" "login" "logout" "origin/master" "origin/preliminary-datomic-layer" "origin/master" "manifest-diff-logic" "test" "origin/manifest-diff-logic" "manifest-diff-logic" "origin/documentation" "documentation" "manifest-diff-logic" "origin/dev" "dev" "origin/everything-is-a-thing" "everything-is-a-thing" "origin/dev" "documentation" "everything-is-a-thing" "everything-is-a-thing" "everything-is-a-thing" "everything-is-a-thing" "dev" "everything-is-a-thing" "dev" "everything-is-a-thing" "master" "everything-is-a-thing" "deploy" "origin/everything-is-a-thing" "dev" "everything-is-a-task" "dev" "deploy" "dev" "deploy" "master" "dev" "deploy" "master" "dev" "deploy" "dev" "deploy" "dev" "deploy" "dev" "master" "dev" "master" "dev" "deploy" "master" "dev" "master" "dev" "deploy" "dev" "dev" "deploy" "master" "master" "origin/deploy" "dev" "dev" "deploy" "dev" "deploy" "dev" "master" "dev" "origin/deploy" "deploy" "dev" "master" "dev" "dev" "master" "origin/dev" "sample-schema-for-dummy-api-deploy" "master" "origin/dev" "deploy" "local" "origin/master" "dev" "master" "dev" "master" "dev" "master" "master" "dev" "master"))
(setq cider-minibuffer-history '("util/get-details" "api.auth" "dtm.convert" "dtm.auth" "db/get-user-auth" "keys" "convert/user" "db/get-user-details" "convert/user" "util/get-details" "db/get-user-details" "api.auth/login" "auth/login" "auth/authorize" "mapv" "schema/User" "auth/login" "schema/User" "with-out-str" "comp" "s/defschema" "db/transact" "process-csv-row" "get-recharges" "fs/get-talktime-recharges" "core/get-best-recharges" "get-recharges" "get-output-html" "show-plans" "fs/get-talktime-recharges" "core/get-best-recharges" "get-recharges" "core/get-best-recharges" "best-plan.core" "string/join" "fs/get-talktime-recharges" "core/get-best-recharges" "get-recharges" "best-plan.server/get-output-html" "best-plan.server/show-plans" "best-plan.api-datayuge" "stringify-nil" "doseq" "do-seq" "save-json/read-json-file" "make-parents"))
(setq search-ring '("rename" "delete" "combina"))
(setq buffer-name-history '("*cider-repl controlroom-api-poc*" "project.clj" "*haskell*" "repl-dump" "*Bookmark List*" ".emacs~" "testrun.clj" "*cider-repl controlroom-dummy-api*" "datomic_schema_generator.clj" "repl-dump" "bst.hs" "mygram" "io" "exercises.hs" "*ansi-term*" "*terminal*" "scratch" "*Flycheck error messages*" "*magit-process: controlroom-dummy-api" "*magit-diff: controlroom-dummy-api" "*magit: controlroom-dummy-api" "pom.xml.asc" ".lei" "*cider-repl docker-compojure-hello-world-master*" "*unsent mail*" "ch" "ch3.hs" "*haskell*" "*terminal*" "ac-comphist.dat" "ch2.hs" "*cider-repl best_plan*" "*terminal*" "*ansi-term*" "*terminal*" "*shell*" "*grep*" "*magit: best_plan" "*heroku bash: bestplan*" "powerline-themes.el" "server.clj" "test.clj" "*Customize Face: Default*" "init.el" "*magit: .emacs.d" "*Customize Face: Default*" "isd.csv" "csv_gen.clj" "csv_gen.clj"))
(setq ido-buffer-history '("*cider-repl controlroom-api-poc*" "project.clj" "*haskell*" "repl-dump" "*Bookmark List*" ".emacs~" "testrun.clj" "*cider-repl controlroom-dummy-api*" "datomic_schema_generator.clj" "repl-dump" "bst.hs" "mygram" "io" "exercises.hs" "*ansi-term*" "*terminal*" "scratch" "*Flycheck error messages*" "*magit-process: controlroom-dummy-api" "*magit-diff: controlroom-dummy-api" "*magit: controlroom-dummy-api" "pom.xml.asc" ".lei" "*cider-repl docker-compojure-hello-world-master*" "*unsent mail*" "ch" "ch3.hs" "*haskell*" "ac-comphist.dat" "ch2.hs" "*cider-repl best_plan*" "*terminal*" "*ansi-term*" "*terminal*" "*shell*" "*grep*" "*magit: best_plan" "*heroku bash: bestplan*" "powerline-themes.el" "server.clj" "test.clj" "*Customize Face: Default*" "init.el" "*magit: .emacs.d" "*Customize Face: Default*" "isd.csv" "*Custom Themes*"))
(setq face-name-history '("default" "all faces" "default" "all faces" "default"))
(setq helm-M-x-input-history '("cider" "eva" "eval" "revert-" "hask" "eva" "buffer" #("130" 0 3 (fontified t)) "eval" "cid" #("enums" 0 5 (face font-lock-variable-name-face cider-locals ("api-key" "password" "channels" "org-unit" "role" "email" "phone" "username" "title" "last-name" "this" "remove" "first-name" "id" "s/fields" "user" "s/schema" "entity" "tags" "measurements" "name" "id" "s/fields" "datasource" "s/schema" "users" "name" "id" "s/fields" "org-unit" "s/schema" "completed-at" "due-date" "updated-at" "created-at" "owner" "client" "status" "tasks" "description" "name" "id" "s/fields" "project" "s/schema" "completed-at" "due-date" "updated-at" "created-at" "sibling" "first-child" "parent" "assigned-by" "assigned-to" "status" "type" "measurements" "project" "description" "name" "id" "s/fields" "task" "s/schema" "datasource" "value" "name" "id" "s/fields" "assignment-measurement" "s/schema" "value" "name" "id" "s/fields" "string-measurement" "s/schema" "value" "name" "id" "s/fields" "integer-measurement" "s/schema") help-echo cider--help-echo fontified t)) "hs-show-al" #("schema" 0 6 (face font-lock-variable-name-face cider-locals ("api-key" "password" "channels" "org-unit" "role" "email" "phone" "username" "title" "last-name" "this" "remove" "first-name" "id" "s/fields" "user" "s/schema" "entity" "tags" "measurements" "name" "id" "s/fields" "datasource" "s/schema" "users" "name" "id" "s/fields" "org-unit" "s/schema" "completed-at" "due-date" "updated-at" "created-at" "owner" "client" "status" "tasks" "description" "name" "id" "s/fields" "project" "s/schema" "completed-at" "due-date" "updated-at" "created-at" "sibling" "first-child" "parent" "assigned-by" "assigned-to" "status" "type" "measurements" "project" "description" "name" "id" "s/fields" "task" "s/schema" "datasource" "value" "name" "id" "s/fields" "assignment-measurement" "s/schema" "value" "name" "id" "s/fields" "string-measurement" "s/schema" "value" "name" "id" "s/fields" "integer-measurement" "s/schema") help-echo cider--help-echo fontified t)) "hs-show" "hs-hide" #("110" 0 3 (fontified t)) "eval" #("eighty" 0 4 (face font-lock-string-face fontified t) 4 6 (face font-lock-string-face fontified t)) #("denoms" 0 6 (fontified t face haskell-definition-face)) #("hundred" 0 7 (fontified t face font-lock-string-face)) #("10" 0 1 (fontified t syntax-table (2)) 1 2 (fontified t syntax-table (2))) #("thousand" 0 8 (fontified t face haskell-definition-face)) "query" "rest" #(":id" 0 1 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 1 3 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo)) "que" "package-ve" "compile" "query" "haskell-mode" "quer" "cider" "clo" "book" "booklis" "clo" "qu" "rep" "revert-" "buffer-re" "repl" "cide" "clo" "ansi" "an" "ter" "term" "clojure" #("pfdin" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) #("100" 0 3 (fontified t)) "eval" "ter" "term" "go to " #(":value" 0 6 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo)) #(":validations" 0 12 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo)) #(":type" 0 5 (face (clojure-keyword-face) cider-locals nil help-echo cider--help-echo fontified t)) "qu" "ter" "term" "par" #("a" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t)) "rep" "cide" "replace-" "replace" "lockstep" "lock" "yank" "cide" "cider-" #("first" 0 5 (cider-locals ("input") help-echo cider--help-echo fontified t)) "cider-load" "cider" "cider-loa" "cider-lo" "cider" "helm-fin" "helm-find-" "find" #("lockstep" 0 8 (helm-cand-num 1 helm-realvalue "lockstep" read-only nil)) #("Print1" 0 6 (fontified t face haskell-constructor-face)) #("buffeOB" 0 7 (fontified t face font-lock-comment-face)) "lockstep" "lockstep-popup" "lockstep" "loc" "lockstep-popup" "lockstep" #("buffe" 0 5 (fontified t face font-lock-comment-face)) "lockstep-popup" "lockstep" "term" "lockstep-popup" "lockstep" "loc" "buff" "loc" "lockstep" "loc"))
(setq minibuffer-history '("/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/util.clj" "util" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/debug/trace.clj" "trac" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/convert.clj" "repl" "con" "sche" "conve" #(":org-unit/id" 0 1 (fontified t face (clojure-keyword-face) cider-old-input 36) 1 9 (fontified t face (font-lock-type-face clojure-keyword-face) cider-old-input 36) 9 10 (fontified t face (default clojure-keyword-face) cider-old-input 36) 10 12 (fontified t face (clojure-keyword-face) cider-old-input 36)) "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/read.clj" "read" "util" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/read.clj" "dtm" "rp" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/convert.clj" "con" "read" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/util.clj" "repl" "uti" "util" "dtm" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/read.clj" "sche" "han" #("user> " 0 6 (fontified t font-lock-face cider-repl-prompt-face read-only t intangible t field cider-repl-prompt rear-nonsticky (field read-only font-lock-face intangible))) "rea" "auth" "schema" "han" #(":swagger" 0 8 (face (clojure-keyword-face) cider-locals ("c/api") fontified t help-echo cider--help-echo)) "han" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/api/read.clj" "han" "sch" "han" "org-units" "api" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/auth.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/util.clj" "rep" "util" "auth" "logout" "rep" "auth" "buffer" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/api/handler.clj" "pro" "han" "ini" #("after-save-hook" 0 15 (fontified t)) "ini" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/api/handler.clj" "han" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/api/auth.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/api/auth" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/api/handler.clj" "han" "in" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/auth.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/convert.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/auth.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/api/auth.clj" "rep" "auh" "rep" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/debug/trace.clj" "trac" "rep" "han" "au" "ini" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/con" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/convert.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/auth.clj" "uti" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/auth.clj" "uti" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/auth.clj" #("input" 0 5 (cider-locals ("input") fontified t help-echo cider--help-echo)) "con" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/auth.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/util.clj" "uti" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/auth.clj" "auth" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/auth.clj" "auth" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/convert.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/dtm/con" "converq" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/debug/trace.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/pro" "proje" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/datomic/util.clj" "/home/puneet/code/work/controlroom/controlroom-api-poc/src/datomic/config.clj" "con"))
(setq helm-occur-history '("diff" "trace" "org" "pend" "user" "proje" #("t21110:" 0 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) #("t21098:" 0 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) #("t93055:" 0 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) "get-entity-map" "compo" "e868f0fe-" "4982" "7cc" "java" "task-" #(":client.datasource/id" 0 21 (face font-lock-builtin-face fontified t)) "datasource" "schema" "datasour" "pfdin" "channe" "chan" ":default" "pare" "tags" "spit" "slurp" "ope" "oper" "arch" "opera" "pfdi" "pfdin" "custom-se" "custom-" "D99" ";" "pfdi" "'packa" "has" "write" "24425" #("t24431:" 0 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) "get-out" "get-retur" "program" "80" #("t25811:" 0 7 (rear-nonsticky (font-lock-face) font-lock-face cider-repl-stdout-face fontified t)) "face" "format" #("t24406:" 0 5 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face)) 5 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) #("t26331:" 0 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) #("t25935:" 0 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) "faces" "consol" "faces" "conso"))
(setq kill-ring '("2dcd5221-8bff-4825-813e-649a328952f0" #("users-details (mapv util/get-details users)" 0 14 (help-echo cider--help-echo fontified t cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap" "emap" "org-unit" "users" "users-details" "users" "id" "keys-same" "keys-converted" "cmap")) 14 15 (fontified t help-echo cider--help-echo cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap" "emap" "org-unit" "users" "users-details" "users" "id" "keys-same" "keys-converted" "cmap") face (rainbow-delimiters-depth-5-face)) 15 19 (fontified t help-echo cider--help-echo cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap" "emap" "org-unit" "users" "users-details" "users" "id" "keys-same" "keys-converted" "cmap") face font-lock-builtin-face) 19 20 (fontified t help-echo cider--help-echo cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap" "emap" "org-unit" "users" "users-details" "users" "id" "keys-same" "keys-converted" "cmap")) 20 24 (fontified t help-echo cider--help-echo cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap" "emap" "org-unit" "users" "users-details" "users" "id" "keys-same" "keys-converted" "cmap") face font-lock-type-face) 24 25 (fontified t help-echo cider--help-echo cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap" "emap" "org-unit" "users" "users-details" "users" "id" "keys-same" "keys-converted" "cmap") face default) 25 42 (fontified t help-echo cider--help-echo cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap" "emap" "org-unit" "users" "users-details" "users" "id" "keys-same" "keys-converted" "cmap")) 42 43 (fontified t help-echo cider--help-echo cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap" "emap" "org-unit" "users" "users-details" "users" "id" "keys-same" "keys-converted" "cmap") face (rainbow-delimiters-depth-5-face))) #("db-id-dissoced               ()" 0 29 (fontified t help-echo cider--help-echo cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "db-id-dissoced" "cmap")) 29 30 (fontified t help-echo cider--help-echo cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "db-id-dissoced" "cmap") face (rainbow-delimiters-depth-5-face)) 30 31 (fontified t help-echo cider--help-echo cider-locals ("namespaced-keyword" "emap" "user-auth" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "db-id-dissoced" "cmap") face (rainbow-delimiters-depth-5-face))) "" ";;; ================================org-units===================================" #("[?eid ]" 0 1 (fontified t help-echo cider--help-echo cider-locals ("db" "id-attr" "q") face (rainbow-delimiters-depth-5-face)) 1 6 (fontified t help-echo cider--help-echo cider-locals ("db" "id-attr" "q")) 6 7 (fontified t help-echo cider--help-echo cider-locals ("db" "id-attr" "q") face (rainbow-delimiters-depth-5-face))) "Add /org-units to controlroom-api-poc" #("[dtm.convert :as convert]" 0 1 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t face (rainbow-delimiters-depth-3-face)) 1 12 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t face font-lock-type-face) 12 13 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t) 13 16 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t face (clojure-keyword-face)) 16 24 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t) 24 25 (fontified t help-echo cider--help-echo cider-locals nil cider-block-dynamic-font-lock t face (rainbow-delimiters-depth-3-face))) "(defn login [credentials]
  (let [{check-username :username check-password :password} credentials]
    (if-not (db/user-exists? check-username)
      (response/unauthorized {:error \"user does not exist\"})
      (if-not (= check-password (db/get-password check-username))
        (response/unauthorized {:error \"wrong password\"})
        (response/ok (db/get-user-auth check-username))))))
" #("(defn login [credentials]
  (authorize-and-respond db/get-user-auth))" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-1-face)) 1 5 (help-echo cider--help-echo fontified t cider-locals nil face font-lock-keyword-face) 5 6 (help-echo cider--help-echo fontified t cider-locals ("credentials")) 6 11 (help-echo cider--help-echo fontified t cider-locals ("credentials") face font-lock-function-name-face) 11 12 (help-echo cider--help-echo fontified t cider-locals ("credentials")) 12 13 (help-echo cider--help-echo fontified t cider-locals ("credentials") face (rainbow-delimiters-depth-2-face)) 13 24 (help-echo cider--help-echo fontified t cider-locals ("credentials")) 24 25 (help-echo cider--help-echo fontified t cider-locals ("credentials") face (rainbow-delimiters-depth-2-face)) 25 26 (help-echo cider--help-echo fontified t cider-locals ("credentials")) 26 28 (help-echo cider--help-echo fontified t cider-locals ("credentials")) 28 29 (help-echo cider--help-echo fontified t cider-locals ("credentials") face (rainbow-delimiters-depth-2-face)) 29 50 (help-echo cider--help-echo fontified t cider-locals ("credentials")) 50 51 (help-echo cider--help-echo fontified t cider-locals ("credentials")) 51 53 (help-echo cider--help-echo fontified t cider-locals ("credentials") face font-lock-type-face) 53 54 (help-echo cider--help-echo fontified t cider-locals ("credentials") face default) 54 67 (help-echo cider--help-echo fontified t cider-locals ("credentials")) 67 68 (help-echo cider--help-echo fontified t cider-locals ("credentials") face (rainbow-delimiters-depth-2-face)) 68 69 (help-echo cider--help-echo fontified t cider-locals ("credentials") face (rainbow-delimiters-depth-1-face))) #("if-not (= check-password (db/get-password check-username))
  (response/unauthorized {:error \"wrong password\"})
" 0 6 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 6 7 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 7 8 (face (rainbow-delimiters-depth-2-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 8 25 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 25 26 (face (rainbow-delimiters-depth-3-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 26 28 (face font-lock-type-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 28 29 (face default cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 29 56 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 56 57 (face (rainbow-delimiters-depth-3-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 57 58 (face (rainbow-delimiters-depth-2-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 58 59 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 59 61 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials")) 61 62 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face (rainbow-delimiters-depth-2-face)) 62 70 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face font-lock-type-face) 70 71 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face default) 71 84 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials")) 84 85 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face (rainbow-delimiters-depth-3-face)) 85 91 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face (clojure-keyword-face)) 91 92 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials")) 92 108 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face font-lock-string-face) 108 109 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face (rainbow-delimiters-depth-3-face)) 109 110 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face (rainbow-delimiters-depth-2-face)) 110 111 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo)) #("(response/unauthorized {:error \"user does not exist\"})
" 0 1 (face (rainbow-delimiters-depth-2-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 1 9 (face font-lock-type-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 9 10 (face default cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 10 23 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 23 24 (face (rainbow-delimiters-depth-3-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 24 30 (face (clojure-keyword-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 30 31 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 31 52 (face font-lock-string-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 52 53 (face (rainbow-delimiters-depth-3-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 53 54 (face (rainbow-delimiters-depth-2-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 54 55 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo)) #("if-not (db/user-exists? check-username)" 0 6 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face font-lock-keyword-face) 6 7 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials")) 7 8 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face (rainbow-delimiters-depth-4-face)) 8 10 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face font-lock-type-face) 10 11 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face default) 11 38 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials")) 38 39 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face (rainbow-delimiters-depth-4-face))) #("let [{check-username :username check-password :password} credentials]
    (if-not (db/user-exists? check-username)
      (response/unauthorized {:error \"user does not exist\"})
      (if-not (= check-password (db/get-password check-username))
        (response/unauthorized {:error \"wrong password\"})
        (authorize-and-respond db/get-user-auth)))" 0 3 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") face font-lock-keyword-face) 3 4 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials" "check-password" "check-username")) 4 5 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials" "check-password" "check-username") face (rainbow-delimiters-depth-3-face)) 5 6 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials" "check-password" "check-username") face (rainbow-delimiters-depth-4-face)) 6 21 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials" "check-password" "check-username")) 21 30 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials" "check-password" "check-username") face (clojure-keyword-face)) 30 46 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials" "check-password" "check-username")) 46 55 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials" "check-password" "check-username") face (clojure-keyword-face)) 55 56 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials" "check-password" "check-username") face (rainbow-delimiters-depth-4-face)) 56 68 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials" "check-password" "check-username")) 68 69 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials" "check-password" "check-username") face (rainbow-delimiters-depth-3-face)) 69 70 (help-echo cider--help-echo fontified t cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials")) 70 74 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 74 75 (face (rainbow-delimiters-depth-3-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 75 81 (face font-lock-keyword-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 81 82 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 82 83 (face (rainbow-delimiters-depth-4-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 83 85 (face font-lock-type-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 85 86 (face default cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 86 113 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 113 114 (face (rainbow-delimiters-depth-4-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 114 115 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 115 121 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 121 122 (face (rainbow-delimiters-depth-4-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 122 130 (face font-lock-type-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 130 131 (face default cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 131 144 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 144 145 (face (rainbow-delimiters-depth-5-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 145 151 (face (clojure-keyword-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 151 152 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 152 173 (face font-lock-string-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 173 174 (face (rainbow-delimiters-depth-5-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 174 175 (face (rainbow-delimiters-depth-4-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 175 176 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 176 182 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 182 183 (face (rainbow-delimiters-depth-4-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 183 189 (face font-lock-keyword-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 189 190 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 190 191 (face (rainbow-delimiters-depth-5-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 191 208 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 208 209 (face (rainbow-delimiters-depth-6-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 209 211 (face font-lock-type-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 211 212 (face default cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 212 239 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 239 240 (face (rainbow-delimiters-depth-6-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 240 241 (face (rainbow-delimiters-depth-5-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 241 242 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 242 250 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 250 251 (face (rainbow-delimiters-depth-5-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 251 259 (face font-lock-type-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 259 260 (face default cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 260 273 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 273 274 (face (rainbow-delimiters-depth-6-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 274 280 (face (clojure-keyword-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 280 281 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 281 297 (face font-lock-string-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 297 298 (face (rainbow-delimiters-depth-6-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 298 299 (face (rainbow-delimiters-depth-5-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 299 300 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 300 308 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 308 309 (face (rainbow-delimiters-depth-5-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 309 330 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 330 331 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 331 333 (face font-lock-type-face cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 333 334 (face default cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 334 347 (cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 347 348 (face (rainbow-delimiters-depth-5-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 348 349 (face (rainbow-delimiters-depth-4-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo) 349 350 (face (rainbow-delimiters-depth-3-face) cider-locals ("params" "logic" "auth" "check-api-key" "check-username" "credentials") fontified t help-echo cider--help-echo)) #("{:result true}" 0 1 (help-echo cider--help-echo fontified t cider-locals ("logic" "auth" "check-api-key" "check-username") face (rainbow-delimiters-depth-5-face)) 1 8 (help-echo cider--help-echo fontified t cider-locals ("logic" "auth" "check-api-key" "check-username") face (clojure-keyword-face)) 8 9 (help-echo cider--help-echo fontified t cider-locals ("logic" "auth" "check-api-key" "check-username")) 9 13 (help-echo cider--help-echo fontified t cider-locals ("logic" "auth" "check-api-key" "check-username") face font-lock-constant-face) 13 14 (help-echo cider--help-echo fontified t cider-locals ("logic" "auth" "check-api-key" "check-username") face (rainbow-delimiters-depth-5-face))) #("      false" 0 6 (help-echo cider--help-echo fontified t cider-locals ("logic" "auth" "check-api-key" "check-username")) 6 11 (help-echo cider--help-echo fontified t cider-locals ("logic" "auth" "check-api-key" "check-username") face font-lock-constant-face)) #(" :orgUnit s/Str
   :orgUnitId s/Str" 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 9 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 9 10 (cider-locals nil fontified t help-echo cider--help-echo) 10 11 (face font-lock-type-face cider-locals nil fontified t help-echo cider--help-echo) 11 12 (face default cider-locals nil fontified t help-echo cider--help-echo) 12 15 (face font-lock-type-face cider-locals nil fontified t help-echo cider--help-echo) 15 19 (cider-locals nil fontified t help-echo cider--help-echo) 19 29 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 29 30 (cider-locals nil fontified t help-echo cider--help-echo) 30 31 (face font-lock-type-face cider-locals nil fontified t help-echo cider--help-echo) 31 32 (face default cider-locals nil fontified t help-echo cider--help-echo) 32 35 (face font-lock-type-face cider-locals nil fontified t help-echo cider--help-echo)) #(" :orgUnit s/Str
   :orgUnitId s/Str" 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 9 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 9 10 (cider-locals nil fontified t help-echo cider--help-echo) 10 11 (face font-lock-type-face cider-locals nil fontified t help-echo cider--help-echo) 11 12 (face default cider-locals nil fontified t help-echo cider--help-echo) 12 15 (face font-lock-type-face cider-locals nil fontified t help-echo cider--help-echo) 15 19 (cider-locals nil fontified t help-echo cider--help-echo) 19 29 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 29 30 (cider-locals nil fontified t help-echo cider--help-echo) 30 31 (face font-lock-type-face cider-locals nil fontified t help-echo cider--help-echo) 31 32 (face default cider-locals nil fontified t help-echo cider--help-echo) 32 35 (face font-lock-type-face cider-locals nil fontified t help-echo cider--help-echo)) "(def Id s/Str)

(s/defschema Manifest
  {:ids [Id]
   :auth Auth})" "(s/defschema OrgUnit
  {:id s/Str
   :name s/Str
   :users [User]})" ";;; ================================logout======================================" "(POST \"/v0.1/org-units\" []
                   :return [schema/OrgUnit]
                   :body [org-units-manifest schema/Manifest]
                   :summary \"Returns all the org units.\"
                   (io/org-units org-units-manifest))" #("(defn authorize [auth]
  (let [{check-username :username check-api-key :apiKey} auth] 
    (if-not (db/user-exists? username)
      {:result false
       :error (response/unauthorized {:error \"user does not exist\"})}
      (if-not (= check-api-key (db/get-api-key username))
        {:result false
         :error (response/unauthorized {:error \"wrong key\"})}
        {:result true}))))" 0 1 (face (rainbow-delimiters-depth-1-face) cider-locals nil help-echo cider--help-echo fontified t) 1 5 (face font-lock-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 5 6 (cider-locals ("auth") help-echo cider--help-echo fontified t) 6 15 (face font-lock-function-name-face cider-locals ("auth") help-echo cider--help-echo fontified t) 15 16 (cider-locals ("auth") help-echo cider--help-echo fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) cider-locals ("auth") help-echo cider--help-echo fontified t) 17 21 (cider-locals ("auth") help-echo cider--help-echo fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) cider-locals ("auth") help-echo cider--help-echo fontified t) 22 23 (cider-locals ("auth") help-echo cider--help-echo fontified t) 23 25 (cider-locals ("auth") help-echo cider--help-echo fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) cider-locals ("auth") help-echo cider--help-echo fontified t) 26 29 (face font-lock-keyword-face cider-locals ("auth") help-echo cider--help-echo fontified t) 29 30 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 31 32 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 32 47 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 47 56 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 56 71 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 71 78 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 78 79 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 79 84 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 84 85 (face (rainbow-delimiters-depth-3-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 85 86 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 86 87 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 87 91 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 91 92 (face (rainbow-delimiters-depth-3-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 92 98 (face font-lock-keyword-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 98 99 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 99 100 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 100 102 (face font-lock-type-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 102 103 (face default cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 103 124 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 124 125 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 125 126 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 126 132 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 132 133 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 133 140 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 140 141 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 141 145 (face font-lock-constant-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 145 146 (face font-lock-constant-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 146 147 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 147 149 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 149 154 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 154 160 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 160 161 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 161 162 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 162 170 (face font-lock-type-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 170 171 (face default cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 171 184 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 184 185 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 185 191 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 191 192 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 192 213 (face font-lock-string-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 213 214 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 214 215 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 215 216 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 216 217 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 217 223 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 223 224 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 224 230 (face font-lock-keyword-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 230 231 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 231 232 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 232 248 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 248 249 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 249 251 (face font-lock-type-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 251 252 (face default cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 252 272 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 272 273 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 273 274 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 274 275 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 275 283 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 283 284 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 284 291 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 291 292 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 292 297 (face font-lock-constant-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 297 298 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 298 307 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 307 313 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 313 314 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 314 315 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 315 323 (face font-lock-type-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 323 324 (face default cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 324 337 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 337 338 (face (rainbow-delimiters-depth-7-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 338 344 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 344 345 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 345 356 (face font-lock-string-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 356 357 (face (rainbow-delimiters-depth-7-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 357 358 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 358 359 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 359 360 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 360 368 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 368 369 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 369 376 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 376 377 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 377 381 (face font-lock-constant-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 381 382 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 382 383 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 383 384 (face (rainbow-delimiters-depth-3-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 384 385 (face (rainbow-delimiters-depth-2-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 385 386 (face (rainbow-delimiters-depth-1-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t rear-nonsticky t)) #("user-details (db/get-user-details check-username)" 0 13 (cider-locals ("auth" "check-api-key" "check-username" "auth" "user-details") fontified t help-echo cider--help-echo) 13 14 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username" "auth" "user-details") fontified t help-echo cider--help-echo) 14 16 (face font-lock-type-face cider-locals ("auth" "check-api-key" "check-username" "auth" "user-details") fontified t help-echo cider--help-echo) 16 17 (face default cider-locals ("auth" "check-api-key" "check-username" "auth" "user-details") fontified t help-echo cider--help-echo) 17 48 (cider-locals ("auth" "check-api-key" "check-username" "auth" "user-details") fontified t help-echo cider--help-echo) 48 49 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username" "auth" "user-details") fontified t help-echo cider--help-echo)) #("check-username :username check-api-key :apiKey" 0 15 (help-echo cider--help-echo fontified t cider-locals ("auth" "check-api-key" "check-username" "auth" "user-details" "check-api-key" "check-username")) 15 24 (help-echo cider--help-echo fontified t cider-locals ("auth" "check-api-key" "check-username" "auth" "user-details" "check-api-key" "check-username") face (clojure-keyword-face)) 24 39 (help-echo cider--help-echo fontified t cider-locals ("auth" "check-api-key" "check-username" "auth" "user-details" "check-api-key" "check-username")) 39 46 (help-echo cider--help-echo fontified t cider-locals ("auth" "check-api-key" "check-username" "auth" "user-details" "check-api-key" "check-username") face (clojure-keyword-face))) #("(defn authorize [auth]
  (let [{check-username :username check-api-key :apiKey} auth] 
    (if-not (db/user-exists? username)
      {:result false
       :error (response/unauthorized {:error \"user does not exist\"})}
      (if-not (= check-api-key (db/get-api-key username))
        {:result false
         :error (response/unauthorized {:error \"wrong key\"})}
        {:result true}))))" 0 1 (face (rainbow-delimiters-depth-1-face) cider-locals nil fontified t help-echo cider--help-echo) 1 5 (face font-lock-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 5 6 (cider-locals ("auth") fontified t help-echo cider--help-echo) 6 15 (face font-lock-function-name-face cider-locals ("auth") fontified t help-echo cider--help-echo) 15 16 (cider-locals ("auth") fontified t help-echo cider--help-echo) 16 17 (face (rainbow-delimiters-depth-2-face) cider-locals ("auth") fontified t help-echo cider--help-echo) 17 21 (cider-locals ("auth") fontified t help-echo cider--help-echo) 21 22 (face (rainbow-delimiters-depth-2-face) cider-locals ("auth") fontified t help-echo cider--help-echo) 22 23 (cider-locals ("auth") fontified t help-echo cider--help-echo) 23 25 (cider-locals ("auth") fontified t help-echo cider--help-echo) 25 26 (face (rainbow-delimiters-depth-2-face) cider-locals ("auth") fontified t help-echo cider--help-echo) 26 29 (face font-lock-keyword-face cider-locals ("auth") fontified t help-echo cider--help-echo) 29 30 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 30 31 (face (rainbow-delimiters-depth-3-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 31 32 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 32 47 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 47 56 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 56 71 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 71 78 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 78 79 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 79 84 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 84 85 (face (rainbow-delimiters-depth-3-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 85 86 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 86 87 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 87 91 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 91 92 (face (rainbow-delimiters-depth-3-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 92 98 (face font-lock-keyword-face cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 98 99 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 99 100 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 100 102 (face font-lock-type-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 102 103 (face default cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 103 124 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 124 125 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 125 126 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 126 132 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 132 133 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 133 140 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 140 141 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 141 145 (face font-lock-constant-face cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 145 146 (face font-lock-constant-face cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 146 147 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 147 149 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 149 154 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 154 160 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 160 161 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 161 162 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 162 170 (face font-lock-type-face cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 170 171 (face default cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 171 184 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 184 185 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 185 191 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 191 192 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 192 213 (face font-lock-string-face cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 213 214 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 214 215 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 215 216 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 216 217 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 217 223 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 223 224 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 224 230 (face font-lock-keyword-face cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 230 231 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 231 232 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 232 248 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 248 249 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 249 251 (face font-lock-type-face cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 251 252 (face default cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 252 272 (cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 272 273 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") help-echo cider--help-echo fontified t) 273 274 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 274 275 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 275 283 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 283 284 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 284 291 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 291 292 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 292 297 (face font-lock-constant-face cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 297 298 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 298 307 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 307 313 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 313 314 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 314 315 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 315 323 (face font-lock-type-face cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 323 324 (face default cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 324 337 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 337 338 (face (rainbow-delimiters-depth-7-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 338 344 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 344 345 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 345 356 (face font-lock-string-face cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 356 357 (face (rainbow-delimiters-depth-7-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 357 358 (face (rainbow-delimiters-depth-6-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 358 359 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 359 360 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 360 368 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 368 369 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 369 376 (face (clojure-keyword-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 376 377 (cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 377 381 (face font-lock-constant-face cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 381 382 (face (rainbow-delimiters-depth-5-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 382 383 (face (rainbow-delimiters-depth-4-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 383 384 (face (rainbow-delimiters-depth-3-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 384 385 (face (rainbow-delimiters-depth-2-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 385 386 (face (rainbow-delimiters-depth-1-face) cider-locals ("auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo rear-nonsticky t)) #(";;; ================================login=======================================" 0 4 (face font-lock-comment-delimiter-face cider-locals nil fontified t help-echo cider--help-echo) 4 80 (face font-lock-comment-face cider-locals nil fontified t help-echo cider--help-echo)) #("(defn user-exists? [username]
  (not (nil? (util/get-eid :user/username username (util/get-db)))))" 0 1 (face (rainbow-delimiters-depth-1-face) cider-locals nil help-echo cider--help-echo fontified t) 1 5 (face font-lock-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 5 6 (cider-locals ("username") help-echo cider--help-echo fontified t) 6 18 (face font-lock-function-name-face cider-locals ("username") help-echo cider--help-echo fontified t) 18 19 (cider-locals ("username") help-echo cider--help-echo fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) cider-locals ("username") help-echo cider--help-echo fontified t) 20 28 (cider-locals ("username") help-echo cider--help-echo fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) cider-locals ("username") help-echo cider--help-echo fontified t) 29 30 (cider-locals ("username") help-echo cider--help-echo fontified t) 30 32 (cider-locals ("username") help-echo cider--help-echo fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) cider-locals ("username") help-echo cider--help-echo fontified t) 33 36 (face font-lock-builtin-face cider-locals ("username") help-echo cider--help-echo fontified t) 36 37 (cider-locals ("username") help-echo cider--help-echo fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) cider-locals ("username") help-echo cider--help-echo fontified t) 38 42 (face font-lock-builtin-face cider-locals ("username") help-echo cider--help-echo fontified t) 42 43 (cider-locals ("username") help-echo cider--help-echo fontified t) 43 44 (face (rainbow-delimiters-depth-4-face) cider-locals ("username") help-echo cider--help-echo fontified t) 44 48 (face font-lock-type-face cider-locals ("username") help-echo cider--help-echo fontified t) 48 49 (face default cider-locals ("username") help-echo cider--help-echo fontified t) 49 57 (cider-locals ("username") help-echo cider--help-echo fontified t) 57 58 (face (clojure-keyword-face) cider-locals ("username") help-echo cider--help-echo fontified t) 58 62 (face (font-lock-type-face clojure-keyword-face) cider-locals ("username") help-echo cider--help-echo fontified t) 62 63 (face (default clojure-keyword-face) cider-locals ("username") help-echo cider--help-echo fontified t) 63 71 (face (clojure-keyword-face) cider-locals ("username") help-echo cider--help-echo fontified t) 71 81 (cider-locals ("username") help-echo cider--help-echo fontified t) 81 82 (face (rainbow-delimiters-depth-5-face) cider-locals ("username") help-echo cider--help-echo fontified t) 82 86 (face font-lock-type-face cider-locals ("username") help-echo cider--help-echo fontified t) 86 87 (face default cider-locals ("username") help-echo cider--help-echo fontified t) 87 93 (cider-locals ("username") help-echo cider--help-echo fontified t) 93 94 (face (rainbow-delimiters-depth-5-face) cider-locals ("username") help-echo cider--help-echo fontified t) 94 95 (face (rainbow-delimiters-depth-4-face) cider-locals ("username") help-echo cider--help-echo fontified t) 95 96 (face (rainbow-delimiters-depth-3-face) cider-locals ("username") help-echo cider--help-echo fontified t) 96 97 (face (rainbow-delimiters-depth-2-face) cider-locals ("username") help-echo cider--help-echo fontified t) 97 98 (face (rainbow-delimiters-depth-1-face) cider-locals ("username") help-echo cider--help-echo fontified t rear-nonsticky t)) #("(defn get-password [username]
  (when (user-exists? username)
    (:user/password (util/get-details :user/username username (util/get-db)))))" 0 1 (face (rainbow-delimiters-depth-1-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 1 2 (face font-lock-keyword-face cider-locals ("username" "username") fontified t help-echo cider--help-echo) 2 5 (face font-lock-keyword-face cider-locals ("username" "username") fontified t help-echo cider--help-echo) 5 6 (cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 6 18 (face font-lock-function-name-face cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 18 19 (cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 19 20 (face (rainbow-delimiters-depth-2-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 20 28 (cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 28 29 (face (rainbow-delimiters-depth-2-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 29 30 (cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 30 32 (cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 32 33 (face (rainbow-delimiters-depth-2-face) cider-locals ("username" "username" "username") help-echo cider--help-echo fontified t) 33 37 (face font-lock-keyword-face cider-locals ("username" "username" "username") help-echo cider--help-echo fontified t) 37 38 (cider-locals ("username" "username" "username") help-echo cider--help-echo fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) cider-locals ("username" "username" "username") help-echo cider--help-echo fontified t) 39 60 (cider-locals ("username" "username" "username") help-echo cider--help-echo fontified t) 60 61 (face (rainbow-delimiters-depth-3-face) cider-locals ("username" "username" "username") help-echo cider--help-echo fontified t) 61 66 (cider-locals ("username" "username" "username") help-echo cider--help-echo fontified t) 66 67 (face (rainbow-delimiters-depth-3-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 67 68 (face (clojure-keyword-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 68 72 (face (font-lock-type-face clojure-keyword-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 72 73 (face (default clojure-keyword-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 73 81 (face (clojure-keyword-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 81 82 (cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 82 83 (face (rainbow-delimiters-depth-4-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 83 87 (face font-lock-type-face cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 87 88 (face default cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 88 100 (cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 100 101 (face (clojure-keyword-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 101 105 (face (font-lock-type-face clojure-keyword-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 105 106 (face (default clojure-keyword-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 106 114 (face (clojure-keyword-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 114 124 (cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 124 125 (face (rainbow-delimiters-depth-5-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 125 129 (face font-lock-type-face cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 129 130 (face default cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 130 136 (cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 136 137 (face (rainbow-delimiters-depth-5-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 137 138 (face (rainbow-delimiters-depth-4-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 138 139 (face (rainbow-delimiters-depth-3-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo) 139 140 (face (rainbow-delimiters-depth-2-face) cider-locals ("username" "username" "username") help-echo cider--help-echo fontified t) 140 141 (face (rainbow-delimiters-depth-1-face) cider-locals ("username" "username" "username") fontified t help-echo cider--help-echo)) #("(:api-key actual-auth)" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals ("credentials" "check-password" "check-username" "auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 1 9 (face (clojure-keyword-face) cider-locals ("credentials" "check-password" "check-username" "auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 9 21 (cider-locals ("credentials" "check-password" "check-username" "auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 21 22 (face (rainbow-delimiters-depth-6-face) cider-locals ("credentials" "check-password" "check-username" "auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo)) #(";; (clojure.pprint/pprint (str actual-username \" \" check-username))" 0 3 (face font-lock-comment-delimiter-face cider-locals ("credentials" "check-password" "check-username" "auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 3 67 (face font-lock-comment-face cider-locals ("credentials" "check-password" "check-username" "auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo)) #("(defn user-exists? [username]
  (not (nil? (util/get-eid :user/username username (util/get-db)))))" 0 1 (face (rainbow-delimiters-depth-1-face) cider-locals ("username") fontified t help-echo cider--help-echo) 1 5 (face font-lock-keyword-face cider-locals ("username") fontified t help-echo cider--help-echo) 5 6 (cider-locals ("username" "username") fontified t help-echo cider--help-echo) 6 18 (face font-lock-function-name-face cider-locals ("username" "username") fontified t help-echo cider--help-echo) 18 19 (cider-locals ("username" "username") fontified t help-echo cider--help-echo) 19 20 (face (rainbow-delimiters-depth-2-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 20 28 (cider-locals ("username" "username") fontified t help-echo cider--help-echo) 28 29 (face (rainbow-delimiters-depth-2-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 29 30 (cider-locals ("username" "username") fontified t help-echo cider--help-echo) 30 32 (cider-locals ("username" "username") fontified t help-echo cider--help-echo) 32 33 (face (rainbow-delimiters-depth-2-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 33 36 (face font-lock-builtin-face cider-locals ("username" "username") fontified t help-echo cider--help-echo) 36 37 (cider-locals ("username" "username") fontified t help-echo cider--help-echo) 37 38 (face (rainbow-delimiters-depth-3-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 38 42 (face font-lock-builtin-face cider-locals ("username" "username") fontified t help-echo cider--help-echo) 42 43 (cider-locals ("username" "username") fontified t help-echo cider--help-echo) 43 44 (face (rainbow-delimiters-depth-4-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 44 48 (face font-lock-type-face cider-locals ("username" "username") fontified t help-echo cider--help-echo) 48 49 (face default cider-locals ("username" "username") fontified t help-echo cider--help-echo) 49 57 (cider-locals ("username" "username") fontified t help-echo cider--help-echo) 57 58 (face (clojure-keyword-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 58 62 (face (font-lock-type-face clojure-keyword-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 62 63 (face (default clojure-keyword-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 63 71 (face (clojure-keyword-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 71 81 (cider-locals ("username" "username") fontified t help-echo cider--help-echo) 81 82 (face (rainbow-delimiters-depth-5-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 82 86 (face font-lock-type-face cider-locals ("username" "username") fontified t help-echo cider--help-echo) 86 87 (face default cider-locals ("username" "username") fontified t help-echo cider--help-echo) 87 93 (cider-locals ("username" "username") fontified t help-echo cider--help-echo) 93 94 (face (rainbow-delimiters-depth-5-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 94 95 (face (rainbow-delimiters-depth-4-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 95 96 (face (rainbow-delimiters-depth-3-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 96 97 (face (rainbow-delimiters-depth-2-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo) 97 98 (face (rainbow-delimiters-depth-1-face) cider-locals ("username" "username") fontified t help-echo cider--help-echo rear-nonsticky t)) #("(defn user-exists? [username])" 0 1 (face (rainbow-delimiters-depth-1-face) cider-locals ("username") help-echo cider--help-echo fontified t) 1 5 (face font-lock-keyword-face cider-locals ("username") help-echo cider--help-echo fontified t) 5 6 (cider-locals ("username" "username") help-echo cider--help-echo fontified t) 6 18 (face font-lock-function-name-face cider-locals ("username" "username") help-echo cider--help-echo fontified t) 18 19 (cider-locals ("username" "username") help-echo cider--help-echo fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) cider-locals ("username" "username") help-echo cider--help-echo fontified t) 20 28 (cider-locals ("username" "username") help-echo cider--help-echo fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) cider-locals ("username" "username") help-echo cider--help-echo fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) cider-locals ("username" "username") help-echo cider--help-echo fontified t)) #("{:keys [user] :as user-auth} (db/get-user-auth check-username)" 0 1 (face (rainbow-delimiters-depth-4-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 1 6 (face (clojure-keyword-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 6 7 (cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 8 12 (cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 12 13 (face (rainbow-delimiters-depth-5-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 13 14 (cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 14 17 (face (clojure-keyword-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 17 27 (cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 27 28 (face (rainbow-delimiters-depth-4-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 28 29 (cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 30 32 (face font-lock-type-face cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 32 33 (face default cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 33 61 (cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t) 61 62 (face (rainbow-delimiters-depth-4-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username") help-echo cider--help-echo fontified t)) #("(get-map? :username check-username user-auths)" 0 1 (face (rainbow-delimiters-depth-4-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username" "auth" "actual-auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 1 10 (cider-locals ("credentials" "user-auth" "user" "check-password" "check-username" "auth" "actual-auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 10 19 (face (clojure-keyword-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username" "auth" "actual-auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 19 45 (cider-locals ("credentials" "user-auth" "user" "check-password" "check-username" "auth" "actual-auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo) 45 46 (face (rainbow-delimiters-depth-4-face) cider-locals ("credentials" "user-auth" "user" "check-password" "check-username" "auth" "actual-auth" "check-api-key" "check-username") fontified t help-echo cider--help-echo)) "(defn logout [auth]
  (let [{check-username :username check-password :password} auth
        user-details (db/get-user-details check-username)]
    ))

(defn authorize [auth]
  (let [{check-username :username check-api-key :apiKey} auth
        actual-auth (get-map? :username check-username user-auths)]
    ;; (clojure.pprint/pprint (str actual-username \" \" check-username))
    (if-not actual-auth
      {:result false
       :error (response/unauthorized {:error \"user does not exist\"})}
      (if-not (= check-api-key (:api-key actual-auth))
        {:result false
         :error (response/unauthorized {:error \"wrong key\"})}
        {:result true}))))" ";;; ================================login=======================================" "(s/defschema Result
  {:result s/Bool})" "(s/defschema Auth
  {:username s/Str
   :apiKey s/Str})" "(POST \"/v0.1/logout\" []
                   :return schema/Result
                   :body [auth schema/Auth]
                   :summary \"Logs out the user if auth is correct.\"
                   (auth/logout auth))" #("(def a 1)
(def b 2)
(def c 4)
(def d 55)
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("c/api") face (rainbow-delimiters-depth-1-face)) 1 4 (fontified t help-echo cider--help-echo cider-locals ("c/api") face font-lock-keyword-face) 4 5 (fontified t help-echo cider--help-echo cider-locals ("c/api")) 5 6 (fontified t help-echo cider--help-echo cider-locals ("c/api") face font-lock-variable-name-face) 6 8 (fontified t help-echo cider--help-echo cider-locals ("c/api")) 8 9 (fontified t help-echo cider--help-echo cider-locals ("c/api") face (rainbow-delimiters-depth-1-face)) 9 10 (fontified t help-echo cider--help-echo cider-locals ("c/api")) 10 11 (face (rainbow-delimiters-depth-1-face) cider-locals ("c/api") help-echo cider--help-echo fontified t) 11 14 (face font-lock-keyword-face cider-locals ("c/api") help-echo cider--help-echo fontified t) 14 15 (cider-locals ("c/api") help-echo cider--help-echo fontified t) 15 16 (face font-lock-variable-name-face cider-locals ("c/api") help-echo cider--help-echo fontified t) 16 18 (cider-locals ("c/api") help-echo cider--help-echo fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) cider-locals ("c/api") help-echo cider--help-echo fontified t) 19 20 (fontified t help-echo cider--help-echo cider-locals ("c/api")) 20 21 (face (rainbow-delimiters-depth-1-face) cider-locals ("c/api") help-echo cider--help-echo fontified t) 21 24 (face font-lock-keyword-face cider-locals ("c/api") help-echo cider--help-echo fontified t) 24 25 (cider-locals ("c/api") help-echo cider--help-echo fontified t) 25 26 (face font-lock-variable-name-face cider-locals ("c/api") help-echo cider--help-echo fontified t) 26 28 (cider-locals ("c/api") help-echo cider--help-echo fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) cider-locals ("c/api") help-echo cider--help-echo fontified t) 29 30 (fontified t help-echo cider--help-echo cider-locals ("c/api")) 30 31 (face (rainbow-delimiters-depth-1-face) cider-locals ("c/api") help-echo cider--help-echo fontified t) 31 34 (face font-lock-keyword-face cider-locals ("c/api") help-echo cider--help-echo fontified t) 34 35 (cider-locals ("c/api") help-echo cider--help-echo fontified t) 35 36 (face font-lock-variable-name-face cider-locals ("c/api") help-echo cider--help-echo fontified t) 36 39 (cider-locals ("c/api") help-echo cider--help-echo fontified t) 39 40 (face (rainbow-delimiters-depth-1-face) cider-locals ("c/api") help-echo cider--help-echo fontified t) 40 41 (fontified t help-echo cider--help-echo cider-locals ("c/api"))) #("[" 0 1 (face (rainbow-delimiters-depth-2-face) cider-locals nil fontified t help-echo cider--help-echo)) #("[" 0 1 (face (rainbow-delimiters-depth-2-face) cider-locals nil fontified t help-echo cider--help-echo)) #(":dependencies [
  :repositories {\"my.datomic.com\" {:url \"https://my.datomic.com/repo\"
                                   :creds :gpg}}
  :ring {:handler api.handler/app}
  :uberjar-name \"server.jar\"
  :profiles {:dev {:dependencies [[javax.servlet/javax.servlet-api \"3.1.0\"]]
                   :plugins [[lein-ring \"0.12.0\"]]}})" 0 13 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 13 14 (cider-locals nil fontified t help-echo cider--help-echo) 14 15 (face (rainbow-delimiters-depth-2-face) cider-locals nil fontified t help-echo cider--help-echo) 15 16 (cider-locals nil fontified t help-echo cider--help-echo) 16 18 (cider-locals nil fontified t help-echo cider--help-echo) 18 31 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 31 32 (cider-locals nil fontified t help-echo cider--help-echo) 32 33 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 33 49 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 49 50 (cider-locals nil fontified t help-echo cider--help-echo) 50 51 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 51 55 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 55 56 (cider-locals nil fontified t help-echo cider--help-echo) 56 85 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 85 86 (cider-locals nil fontified t help-echo cider--help-echo) 86 121 (cider-locals nil fontified t help-echo cider--help-echo) 121 127 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 127 128 (cider-locals nil fontified t help-echo cider--help-echo) 128 132 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 132 133 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 133 134 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 134 137 (cider-locals nil fontified t help-echo cider--help-echo) 137 142 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 142 143 (cider-locals nil fontified t help-echo cider--help-echo) 143 144 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 144 152 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 152 153 (cider-locals nil fontified t help-echo cider--help-echo) 153 164 (face font-lock-type-face cider-locals nil fontified t help-echo cider--help-echo) 164 165 (face default cider-locals nil fontified t help-echo cider--help-echo) 165 168 (cider-locals nil fontified t help-echo cider--help-echo) 168 169 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 169 172 (cider-locals nil fontified t help-echo cider--help-echo) 172 185 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 185 186 (cider-locals nil fontified t help-echo cider--help-echo) 186 198 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 198 201 (cider-locals nil fontified t help-echo cider--help-echo) 201 210 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 210 211 (cider-locals nil fontified t help-echo cider--help-echo) 211 212 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 212 216 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 216 217 (cider-locals nil fontified t help-echo cider--help-echo) 217 218 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 218 231 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 231 232 (cider-locals nil fontified t help-echo cider--help-echo) 232 233 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 233 234 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 234 247 (face font-lock-type-face cider-locals nil fontified t help-echo cider--help-echo) 247 248 (face default cider-locals nil fontified t help-echo cider--help-echo) 248 266 (cider-locals nil fontified t help-echo cider--help-echo) 266 273 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 273 274 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 274 275 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 275 295 (cider-locals nil fontified t help-echo cider--help-echo) 295 303 (face (clojure-keyword-face) cider-locals nil fontified t help-echo cider--help-echo) 303 304 (cider-locals nil fontified t help-echo cider--help-echo) 304 305 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 305 306 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 306 316 (cider-locals nil fontified t help-echo cider--help-echo) 316 324 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 324 325 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 325 326 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 326 327 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 327 328 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 328 329 (face (rainbow-delimiters-mismatched-face) cider-locals nil fontified t help-echo cider--help-echo)) #("[org.clojure/tools.namespace \"0.2.3\"]" 0 1 (face (rainbow-delimiters-depth-3-face) cider-locals nil help-echo cider--help-echo fontified t) 1 12 (face font-lock-type-face cider-locals nil help-echo cider--help-echo fontified t) 12 13 (face default cider-locals nil help-echo cider--help-echo fontified t) 13 29 (cider-locals nil help-echo cider--help-echo fontified t) 29 36 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 36 37 (face (rainbow-delimiters-depth-3-face) cider-locals nil help-echo cider--help-echo rear-nonsticky t fontified t)) ":dependencies [[org.clojure/tools.namespace \"0.2.3\"]" #("FileNotFoundException Could not locate clojure/tools/namespace/repl__init.class or clojure/tools/namespace/repl.clj on classpath.  clojure.lang.RT.load (RT.java:456)
" 0 165 (rear-nonsticky (font-lock-face) font-lock-face cider-repl-stderr-face fontified t) 165 166 (fontified t)) #("FileNotFoundException Could not locate clojure/tools/namespace/repl__init.class or clojure/tools/namespace/repl.clj on classpath.  clojure.lang.RT.load (RT.java:456)
" 0 165 (rear-nonsticky (font-lock-face) font-lock-face cider-repl-stderr-face fontified t) 165 166 (fontified t)) #("(defun cider-namespace-refresh ()
  (interactive)
  (cider-interactive-eval
   \"(require 'clojure.tools.namespace.repl)
  (clojure.tools.namespace.repl/refresh)\"))" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 30 (fontified t face font-lock-function-name-face) 30 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 34 (fontified t) 34 36 (fontified t) 36 37 (fontified t face (rainbow-delimiters-depth-2-face)) 37 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-2-face)) 53 79 (fontified t) 79 161 (fontified t face font-lock-string-face) 161 162 (fontified t face (rainbow-delimiters-depth-2-face)) 162 163 (fontified t face (rainbow-delimiters-depth-1-face))) "(add-hook 'cider-mode-hook
   '(lambda () (add-hook 'after-save-hook
    '(lambda ()
       (if (and (boundp 'cider-mode) cider-mode)
    (cider-namespace-refresh)
         )))))
 
(defun cider-namespace-refresh ()
  (interactive)
  (cider-interactive-eval
   \"(require 'clojure.tools.namespace.repl)
  (clojure.tools.namespace.repl/refresh)\"))
 
(define-key clojure-mode-map (kbd \"C-c C-r\") 'cider-namespace-refresh)
" "(global-auto-revert-mode t)" #("org-unit-name-added          ()" 0 29 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 29 30 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 30 31 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "user" "org-unit-name" "org-unit-id" "org-unit-details" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo)) #("org-unit-details             (keys (util/get-details orgUnit))
          org-unit-id                  (str (:id org-unit-details))
          org-unit-name                (:name org-unit-details)" 0 29 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 29 30 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 30 34 (face font-lock-builtin-face cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 34 35 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 35 36 (face (rainbow-delimiters-depth-6-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 36 40 (face font-lock-type-face cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 40 41 (face default cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 41 53 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 53 60 (face clojure-interop-method-face cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 60 61 (face (rainbow-delimiters-depth-6-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 61 62 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 62 63 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 63 102 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 102 103 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 103 106 (face font-lock-builtin-face cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 106 107 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 107 108 (face (rainbow-delimiters-depth-6-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 108 111 (face (clojure-keyword-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 111 128 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 128 129 (face (rainbow-delimiters-depth-6-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 129 130 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 130 131 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 131 140 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 140 170 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 170 171 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 171 176 (face (clojure-keyword-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 176 193 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 193 194 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo)) #("org-unit-details             (keys (util/get-details orgUnit))
          org-unit-id                  (str (:id org-unit-details))
          org-unit-name                (:name org-unit-details)" 0 29 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 29 30 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 30 34 (face font-lock-builtin-face cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 34 35 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 35 36 (face (rainbow-delimiters-depth-6-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 36 40 (face font-lock-type-face cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 40 41 (face default cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 41 53 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 53 60 (face clojure-interop-method-face cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 60 61 (face (rainbow-delimiters-depth-6-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 61 62 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 62 63 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 63 102 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 102 103 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 103 106 (face font-lock-builtin-face cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 106 107 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 107 108 (face (rainbow-delimiters-depth-6-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 108 111 (face (clojure-keyword-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 111 128 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 128 129 (face (rainbow-delimiters-depth-6-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 129 130 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 130 131 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 131 140 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 140 170 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 170 171 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 171 176 (face (clojure-keyword-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 176 193 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 193 194 (face (rainbow-delimiters-depth-5-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo)) #("id-added                     (assoc channels-added :id (str id))
" 0 29 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap")) 29 30 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face (rainbow-delimiters-depth-5-face)) 30 35 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face font-lock-builtin-face) 35 51 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap")) 51 54 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face (clojure-keyword-face)) 54 55 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap")) 55 56 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face (rainbow-delimiters-depth-6-face)) 56 59 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face font-lock-builtin-face) 59 62 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap")) 62 63 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face (rainbow-delimiters-depth-6-face)) 63 64 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face (rainbow-delimiters-depth-5-face)) 64 65 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap"))) #("channels-added               (assoc role-added :channels )
" 0 29 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap")) 29 30 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face (rainbow-delimiters-depth-5-face)) 30 35 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face font-lock-builtin-face) 35 47 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap")) 47 56 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face (clojure-keyword-face)) 56 57 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap")) 57 58 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") face (rainbow-delimiters-depth-5-face)) 58 59 (help-echo cider--help-echo fontified t cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap"))) #("(mapv remove-namespace-str channels)" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 1 5 (face font-lock-builtin-face cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 5 35 (cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo) 35 36 (face (rainbow-delimiters-depth-6-face) cider-locals ("cmap" "transformer" "emap" "user-auth" "org-unit-name-added" "org-unit-name" "org-unit-id" "org-unit-details" "id-added" "channels-added" "role-added" "apiKey" "channels" "orgUnit" "role" "id" "keys-same" "keys-converted" "cmap") fontified t help-echo cider--help-echo)) #(")" 0 1 (face (rainbow-delimiters-unmatched-face) cider-locals ("cmap" "transformer") fontified t help-echo cider--help-echo)) #(")" 0 1 (face (rainbow-delimiters-unmatched-face) cider-locals ("cmap" "transformer") fontified t help-echo cider--help-echo)) #("(convert-case-helper/transform-keys transformer input)" 0 1 (face (rainbow-delimiters-depth-2-face) cider-locals ("input" "transformer") fontified t help-echo cider--help-echo) 1 20 (face font-lock-type-face cider-locals ("input" "transformer") fontified t help-echo cider--help-echo) 20 21 (face default cider-locals ("input" "transformer") fontified t help-echo cider--help-echo) 21 53 (cider-locals ("input" "transformer") fontified t help-echo cider--help-echo) 53 54 (face (rainbow-delimiters-depth-2-face) cider-locals ("input" "transformer") fontified t help-echo cider--help-echo))))
