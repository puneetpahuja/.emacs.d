;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(file-name-history extended-command-history heroku-command-hist heroku-app-hist read-expression-history magit-revision-history cider-minibuffer-history search-ring buffer-name-history ido-buffer-history face-name-history helm-M-x-input-history minibuffer-history helm-occur-history))
(setq file-name-history '("~/code/mygram/scratch/datomictoy/src/datomictoy/auth.clj" "~/code/mygram/compojure-api/project.clj" "~/code/mygram/compojure-api/src/account_service/core.clj" "~/code/mygram/compojure-api/resources/schema.dtm" "~/code/mygram/scratch/datomictoy/project.clj" "~/code/mygram/scratch/datomictest/project.clj" "~/code/mygram/compojure-api/test/account_service/db_test.clj" "~/code/mygram/scratch/datomictest/src/datomictest/db_test.clj" "~/code/mygram/scratch/datomictest/src/datomictest/handler.clj" "~/code/mygram/datomic-pro-0.9.5561.62/sql-transactor.properties" "~/.lein/credentials.clj" "~/code/mygram/compojure-api/resources/sql-transactor.properties" "~/code/mygram/compojure-api/src/account_service/db.clj" "~/code/mygram/compojure-api/resources/sql-transactor-template.properties" "~/code/mygram/whip/src/whip/core.cljs" "~/code/mygram/whip/resources/public/js/compiled/whip.js" "~/code/mygram/whip/resources/public/index.html" "~/code/mygram/docker-compojure-hello-world-master/Dockerfile" "~/Downloads/books/clojurescript/web dev clojure book code/ring-app/project.clj" "~/Downloads/books/clojurescript/web dev clojure book code/ring-app/src/ring_app/core.clj" "~/code/geekskool/best_plan/src/best_plan/server.clj" "~/code/geekskool/best_plan/src/best_plan/core.clj" "~/code/mygram/docker-compojure-hello-world-master/project.clj" "~/code/mygram/mygram-httpserver/config/openresty.conf" "~/code/mygram/mygram-httpserver/config/nginx.conf" "~/code/mygram/mygram-httpserver/py-brpop/py-brpop.conf" "~/code/mygram/mygram-httpserver/Dockerfile" "~/code/mygram/docker-compojure-hello-world-master/run-docker-container.sh" "~/code/mygram/docker-compojure-hello-world-master/build-docker-image.sh" "~/code/mygram/docker-compojure-hello-world-master/src/hello_world/core.clj" "~/code/mygram/mygram-httpserver/py-brpop/listen_to_redis.py" "~/code/mygram/mygram-httpserver/py-brpop/config" "~/.emacs.d/init.el" "~/code/geekskool/clojs/src/clojs/clojs.clj" "~/code/geekskool/haskell_first_principles/TAGS" "~/code/geekskool/haskell_first_principles/ch2/exercises.hs" "~/code/geekskool/haskell_first_principles/ch3/print1.hs" "~/code/geekskool/haskell_first_principles/ch3/ch3.hs" "/home/puneet/code/geekskool/haskell_first_principles/.git/COMMIT_EDITMSG" "~/code/geekskool/best_plan/src/best_plan/utils.clj" "~/code/geekskool/haskell_first_principles/ch2_exercises.hs" "/home/puneet/code/geekskool/haskell_first_principles/.git/COMMIT_EDITMSG" "~/code/geekskool/haskell_first_principles/ch2.hs" "~/code/geekskool/haskell_first_principles/ch2" "/home/puneet/.emacs.d/.git/COMMIT_EDITMSG" "/home/puneet/.emacs.d/.git/COMMIT_EDITMSG" "/home/puneet/code/geekskool/haskell_first_principles/.git/COMMIT_EDITMSG" "~/code/geekskool/haskell_first_principles/ch1.hs" "~/code/geekskool/haskell_first_principles/ch1" "/home/puneet/code/geekskool/best_plan/.git/MERGE_MSG" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "~/a" "~/.emacs.d/vendor/emacs-powerline/powerline.el" "~/.face" "~/.emacs.d/vendor/emacs-powerline/powerline-themes.el" "~/code/geekskool/web_dev_clojure/guestbook/resources/migrations/20170628164847-guestbook.up.sql" "~/code/geekskool/best_plan/resources/public/input_materialize.html" "/home/puneet/.emacs.d/.git/COMMIT_EDITMSG" "~/code/geekskool/clojs/src/clojs/monads.clj" "~/code/geekskool/clojs/src/clojs/utilities.clj" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "~/code/geekskool/best_plan/src/best_plan/api_dataweave.clj" "~/code/geekskool/best_plan/.gitignore" "~/code/geekskool/best_plan/src/best_plan/api_datayuge.clj" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "~/code/geekskool/best_plan/Procfile" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "~/code/geekskool/best_plan/src/best_plan/test.clj" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "~/code/geekskool/best_plan/src/best_plan/convert_csv.clj" "~/code/geekskool/best_plan/src/best_plan/user.clj" "~/code/geekskool/best_plan/src/best_plan/save_jsons_datayuge.clj" "~/code/geekskool/best_plan/src/best_plan/save_jsons_dataweave.clj" "~/code/geekskool/best_plan/src/best_plan/recharge.clj" "~/code/geekskool/best_plan/src/best_plan/gen_csv.clj" "~/code/geekskool/best_plan/src/best_plan/fs.clj" "~/code/geekskool/best_plan/src/best_plan/env.clj" "/home/puneet/.emacs.d/.git/COMMIT_EDITMSG" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "~/code/geekskool/best_plan/src/best_plan/csv_gen.clj" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "/home/puneet/.emacs.d/.git/COMMIT_EDITMSG" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "~/.emacs.d/bookmarks" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "~/code/geekskool/best_plan/src/best_plan/process_api_data.clj" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "~/code/geekskool/best_plan/src/best_plan/get_api_data.clj" "~/code/geekskool/best_plan/src/best_plan/hr.clj" "~/Downloads/books/clojurescript/web dev clojurescript/make_html.clj" "~/code/geekskool/web_dev_clojure/guestbook/project.clj" "~/code/geekskool/web_dev_clojure/guestbook/profiles.clj" "~/code/geekskool/web_dev_clojure/guestbook/resources/templates/base.html" "~/code/geekskool/web_dev_clojure/guestbook/resources/templates/home.html" "~/code/geekskool/web_dev_clojure/ring-app/src/ring_app/core.clj" "~/code/geekskool/web_dev_clojure/ring-app/project.clj" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG" "~/code/geekskool/best_plan/src/best_plan/recharges.clj" "/home/puneet/code/geekskool/best_plan/.git/COMMIT_EDITMSG"))
(setq extended-command-history '("helm-find-files" "lockstep-popup" "lockstep" "display-buffer" "eval-buffer" "cider-restart" "haskell-compile" "electric-newline-and-maybe-indent" "newline-and-indent" "kill-buffer" "term-send-ctrl-x" "term" "describe-variable" "customize-mode" "package-install" "haskell-mode-stylish-buffer" "package-refresh-contents" "paredit-mode" "ansi-term" "shell"))
(setq heroku-command-hist '("bash"))
(setq heroku-app-hist '("bestplan"))
(setq read-expression-history '("(setq line-spacing -1.0)" "(setq line-spacing 0.5)"))
(setq magit-revision-history '("deploy" "local" "origin/master" "dev" "master" "dev" "master" "dev" "master" "master" "dev" "master" "dev" "master" "dev" "master" "dev" "master" "dev" "master" "dev" "master" "dev" "master" "dev" "master"))
(setq cider-minibuffer-history '("db/transact" "process-csv-row" "get-recharges" "fs/get-talktime-recharges" "core/get-best-recharges" "get-recharges" "get-output-html" "show-plans" "fs/get-talktime-recharges" "core/get-best-recharges" "get-recharges" "core/get-best-recharges" "best-plan.core" "string/join" "fs/get-talktime-recharges" "core/get-best-recharges" "get-recharges" "best-plan.server/get-output-html" "best-plan.server/show-plans" "best-plan.api-datayuge" "stringify-nil" "doseq" "do-seq" "save-json/read-json-file" "make-parents"))
(setq search-ring '("delete" "combina"))
(setq buffer-name-history '(".lei" "*cider-repl docker-compojure-hello-world-master*" "*unsent mail*" "ch" "ch3.hs" "*haskell*" "*terminal*" "ac-comphist.dat" "ch2.hs" "*cider-repl best_plan*" "*terminal*" "*ansi-term*" "*terminal*" "*shell*" "*grep*" "*magit: best_plan" "*heroku bash: bestplan*" "powerline-themes.el" "server.clj" "test.clj" "*Customize Face: Default*" "init.el" "*magit: .emacs.d" "*Customize Face: Default*" "isd.csv" "csv_gen.clj" "csv_gen.clj"))
(setq ido-buffer-history '(".lei" "*cider-repl docker-compojure-hello-world-master*" "*unsent mail*" "ch" "ch3.hs" "*haskell*" "ac-comphist.dat" "ch2.hs" "*cider-repl best_plan*" "*terminal*" "*ansi-term*" "*terminal*" "*shell*" "*grep*" "*magit: best_plan" "*heroku bash: bestplan*" "powerline-themes.el" "server.clj" "test.clj" "*Customize Face: Default*" "init.el" "*magit: .emacs.d" "*Customize Face: Default*" "isd.csv" "*Custom Themes*"))
(setq face-name-history '("default" "all faces" "default" "all faces" "default"))
(setq helm-M-x-input-history '("helm-fin" "helm-find-" "find" #("lockstep" 0 8 (read-only nil helm-realvalue "lockstep" helm-cand-num 1)) #("Print1" 0 6 (face haskell-constructor-face fontified t)) #("buffeOB" 0 7 (face font-lock-comment-face fontified t)) "lockstep" "lockstep-popup" "lockstep" "loc" "lockstep-popup" "lockstep" #("buffe" 0 5 (face font-lock-comment-face fontified t)) "lockstep-popup" "lockstep" "term" "lockstep-popup" "lockstep" "loc" "buff" "loc" "lockstep" "loc" "lock" "make-fra" #("python-pip" 0 10 (fontified t)) "locks" "lockstep-p" "locks" "lockstep" "locks" "install" #("110" 0 3 (fontified t)) #("100" 0 3 (fontified t)) #("pfdin" 0 5 (face font-lock-string-face fontified t)) #("MyriadProLight" 0 14 (face font-lock-string-face fontified t)) #("MyriadPro" 0 9 (face font-lock-string-face fontified t)) #("Myriad" 0 6 (face font-lock-string-face fontified t)) #("myriad" 0 6 (face font-lock-string-face fontified t)) #("light" 0 5 (face font-lock-string-face fontified t)) #("pro" 0 3 (face font-lock-string-face fontified t)) #("110" 0 3 (fontified t)) #("pfdin" 0 5 (face font-lock-string-face fontified t)) #("daughter" 0 8 (face font-lock-string-face fontified t)) #("mono" 0 4 (face font-lock-string-face fontified t)) #("operator" 0 8 (face font-lock-string-face fontified t)) #("opecator" 0 8 (face font-lock-string-face fontified t)) #("Daughter" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t)) #("light" 0 5 (face font-lock-string-face fontified t)) #("myriadprolight" 0 14 (face font-lock-string-face fontified t)) #("100" 0 3 (fontified t)) #("operator" 0 8 (face font-lock-string-face fontified t)) #("sourcecodepro" 0 13 (face font-lock-string-face fontified t)) #("consolas" 0 8 (face font-lock-string-face fontified t)) #("mono" 0 4 (face font-lock-string-face fontified t)) #("menlo" 0 5 (face font-lock-string-face fontified t)) #("110" 0 3 (fontified t)) #("100" 0 3 (fontified t)) #("110" 0 3 (fontified t)) #("operator" 0 8 (face font-lock-string-face fontified t)) #("pfdin" 0 5 (face font-lock-string-face fontified t)) #("120" 0 3 (fontified t)) #("110" 0 3 (fontified t)) #("120" 0 3 (fontified t)) #("130" 0 3 (fontified t)) #("120" 0 3 (fontified t)) #("115" 0 3 (fontified t)) #("pragmatapro" 0 11 (face font-lock-string-face fontified t)) #("110" 0 3 (fontified t)) "eva" "cider-res" "hasintemode" "haskell-interactive-mode" "haskell-process" "hask" "hascomp" #("pfdin" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face)) "eve" "electicinde" "newline" "ter" "flych" "flyche" "describe" "cusmode" #("plusTwo" 0 7 (fontified t)) "pac" #("plusTwo" 0 7 (fontified t)) #("in" 0 2 (fontified t face haskell-keyword-face)) "haskesty" "variable" "varia" #("plusTwo" 0 7 (fontified t)) "pacrecon" "pac" "pacins" "pacref" "describe-va" #("3" 0 1 (fontified t)) "hi"))
(setq minibuffer-history '(#("db/register" 0 2 (fontified t help-echo cider--help-echo cider-locals ("creds") face font-lock-type-face) 2 3 (fontified t help-echo cider--help-echo cider-locals ("creds") face default) 3 11 (fontified t help-echo cider--help-echo cider-locals ("creds"))) "au" "db." "user_" "sch" "/home/puneet/code/mygram/scratch/datomictoy/src/datomictoy/" "/home/puneet/code/mygram/compojure-api/" "/home/puneet/code/mygram/compojure-api/src/account_service/" #("db/init-db" 0 2 (help-echo cider--help-echo fontified t cider-locals ("creds") face font-lock-type-face) 2 3 (fontified t help-echo cider--help-echo cider-locals ("creds") face default) 3 10 (fontified t help-echo cider--help-echo cider-locals ("creds"))) "/home/puneet/code/mygram/scratch/datomictoy/src/datomictoy/" "db.c" "/home/puneet/code/mygram/scratch/datomictoy/" "/home/puneet/code/mygram/compojure-api/" "/home/puneet/code/mygram/compojure-api/resources/sch" "/home/puneet/code/mygram/scratch/datomictoy/resources/user_schema.dtm" "/home/puneet/code/mygram/scratch/datomictoy/src/datomictoy/db.clj" #(":swagger" 0 8 (fontified t face (clojure-keyword-face))) #("auth" 0 4 (fontified t)) "/home/puneet/code/mygram/scratch/datomictoy/src/datomictoy/auth.clj" "/home/puneet/code/mygram/scratch/datomictoy/" "/home/puneet/code/mygram/scratch/datomictest/" "/home/puneet/code/mygram/scratch/" "/home/puneet/code/mygram/compojure-api/test/account_service/d" "/home/puneet/code/mygram/scratch/datomictest/src/datomictest/" "/home/puneet/code/mygram/scratch/datomictest/" "/home/puneet/code/mygram/compojure-api/src/" "/home/puneet/code/mygram/scratch/datomictest/p" "/home/puneet/code/mygram/compojure-api/pr" "/home/puneet/code/mygram/scratch/datomictest/src/datomictest/" #("datomic:sql://testdb?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic" 0 90 (fontified t) 90 91 (fontified t rear-nonsticky t)) "scr" "/home/puneet/code/mygram/datomic-pro-0.9.5561.62/" "/home/puneet/code/mygram/scratch/datomictest/src/datomictest/db_test.clj" "/home/puneet/code/mygram/scratch/datomictest/src/" "/home/puneet/code/mygram/scratch/datomictest/pro" "/home/puneet/.lein/c" "/home/puneet/code/mygram/scratch/datomictest/pr" "/home/puneet/code" "ini" "prin" "/home/puneet/code/mygram/compojure-api/pr" "/home/puneet/.lein/credentials.clj.gpg" "/home/puneet/.lei" "/home/puneet/code/mygram/compojure-api/.lei" "/home/puneet/code/mygram/compojure-api/resources/" "/home/puneet/code/mygram/compojure-api/src/account_service/d" "/home/puneet/code/mygram/compojure-api/pro" "/home/puneet/code/mygram/compojure-api/resources/sq" "/home/puneet/code/mygram/compojure-api/src/account_service/" "/home/puneet/code/mygram/compojure-api/" "/home/puneet/code/mygram/compojure-api/resources/" "/home/puneet/code/mygram/compojure-api/pr" "/home/puneet/code" #("nthoetnho" 0 9 (fontified t)) "ini" "/home/puneet/code/mygram/whip/src/whip/co" "/home/puneet/code/mygram/whip/resources/public/js/compiled/wh" "/home/puneet/code/mygram/whip/resources/public/in" "/home/puneet/code/mygram/docker-compojure-hello-world-master/" "scra" "core" "proje" "mess" #("2.0" 0 3 (face font-lock-string-face fontified t)) "proje" "/home/puneet/Downloads/books/clojurescript/web dev clojure book code/ring-app/pro" "mess" "/home/puneet/Downloads/books/clojurescript/web dev clojure book code/ring-app/src/ring_app/core" "pro" "core" #("110" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) "/home/puneet/doc" "in" #("Custom." 0 7 (face font-lock-comment-face fontified t)) #("130" 0 3 (fontified t)) "ini" "clo" "proj" "/home/puneet/code/geekskool/best_plan/src/best_plan/ser" "/home/puneet/code/geekskool/best_plan/src/best_plan/" "/home/puneet/code/gee" "/home/puneet/code" "core" "mess" "/home/puneet/code/mygram/docker-compojure-hello-world-master/pro" "docke" #("/var/log/redis/info.log" 0 23 (fontified t)) "conf" #("/var/log/app/info.log" 0 20 (fontified t) 20 21 (rear-nonsticky t fontified t)) "con" "docker" "dock" "/home/puneet/code/mygram/docker-compojure-hello-world-master/config/app.conf" #("/var/log/py-brpop/info.log" 0 26 (fontified t)) ".con" "/home/puneet/code/mygram/mygram-httpserver/config/" "/home/puneet/code/mygram/docker-compojure-hello-world-master/config/redis.conf" #("redis-server" 0 12 (fontified t)) "/home/puneet/code/mygram/docker-compojure-hello-world-master/base-docker/Dockerfile" "dock"))
(setq helm-occur-history '("ope" "oper" "arch" "opera" "pfdi" "pfdin" "custom-se" "custom-" "D99" ";" "pfdi" "'packa" "has" "write" "24425" #("t24431:" 0 7 (rear-nonsticky (font-lock-face) font-lock-face cider-repl-stdout-face fontified t)) "get-out" "get-retur" "program" "80" #("t25811:" 0 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) "face" "format" #("t24406:" 0 5 (rear-nonsticky (font-lock-face) font-lock-face cider-repl-stdout-face fontified t) 5 7 (rear-nonsticky (font-lock-face) font-lock-face cider-repl-stdout-face fontified t)) #("t26331:" 0 7 (rear-nonsticky (font-lock-face) font-lock-face cider-repl-stdout-face fontified t)) #("t25935:" 0 7 (rear-nonsticky (font-lock-face) font-lock-face cider-repl-stdout-face fontified t)) "faces" "consol" "faces" "conso"))
(setq kill-ring '(#("13194139534313" 0 14 (fontified t)) #("13194139534313" 0 14 (fontified t)) #("13194139534316" 0 14 (fontified t)) "{:eid [:inv/sku \"SKU-42\"]
       :selector [{:inv/color [:db/ident]}
                  {:inv/size [:db/ident]}
                  {:inv/type [:db/ident]}]}))" #("[tx-data {:user/username (:username creds)
                 :user/password (:password creds)}]" 0 1 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (rainbow-delimiters-depth-3-face)) 1 9 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data")) 9 10 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (rainbow-delimiters-depth-4-face)) 10 11 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (clojure-keyword-face)) 11 15 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (font-lock-type-face clojure-keyword-face)) 15 16 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (default clojure-keyword-face)) 16 24 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (clojure-keyword-face)) 24 25 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data")) 25 26 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (rainbow-delimiters-depth-5-face)) 26 35 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (clojure-keyword-face)) 35 41 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data")) 41 42 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (rainbow-delimiters-depth-5-face)) 42 43 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data")) 43 60 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data")) 60 61 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (clojure-keyword-face)) 61 65 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (font-lock-type-face clojure-keyword-face)) 65 66 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (default clojure-keyword-face)) 66 74 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (clojure-keyword-face)) 74 75 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data")) 75 76 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (rainbow-delimiters-depth-5-face)) 76 85 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (clojure-keyword-face)) 85 91 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data")) 91 92 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (rainbow-delimiters-depth-5-face)) 92 93 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (rainbow-delimiters-depth-4-face)) 93 94 (fontified t help-echo cider--help-echo cider-locals ("creds" "tx-data") face (rainbow-delimiters-depth-3-face))) #("\"datomic:sql://user?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic\"" 0 90 (help-echo cider--help-echo fontified t cider-locals ("uri") face font-lock-string-face) 90 91 (rear-nonsticky t help-echo cider--help-echo fontified t cider-locals ("uri") face font-lock-string-face)) "</style></head><body><div id=\"exception\"><h1>clojure.lang.Compiler$CompilerException</h1><div class=\"message\">java.lang.RuntimeException: No such namespace: d, compiling:(datomictoy/db.clj:5:5)</div><div class=\"trace\"><table><tbody><tr class=\"java\"><td class=\"source\">Compiler.java:6688</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6625</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:3766</td><td class=\"method\">clojure.lang.Compiler$InvokeExpr.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6870</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6625</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6001</td><td class=\"method\">clojure.lang.Compiler$BodyExpr$Parser.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6319</td><td class=\"method\">clojure.lang.Compiler$LetExpr$Parser.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6868</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6856</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6625</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6001</td><td class=\"method\">clojure.lang.Compiler$BodyExpr$Parser.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:5380</td><td class=\"method\">clojure.lang.Compiler$FnMethod.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:3972</td><td class=\"method\">clojure.lang.Compiler$FnExpr.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6866</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6856</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:38</td><td class=\"method\">clojure.lang.Compiler.access$300</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:589</td><td class=\"method\">clojure.lang.Compiler$DefExpr$Parser.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6868</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6625</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6931</td><td class=\"method\">clojure.lang.Compiler.eval</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:7379</td><td class=\"method\">clojure.lang.Compiler.load</td></tr><tr class=\"java\"><td class=\"source\">RT.java:372</td><td class=\"method\">clojure.lang.RT.loadResourceScript</td></tr><tr class=\"java\"><td class=\"source\">RT.java:363</td><td class=\"method\">clojure.lang.RT.loadResourceScript</td></tr><tr class=\"java\"><td class=\"source\">RT.java:453</td><td class=\"method\">clojure.lang.RT.load</td></tr><tr class=\"java\"><td class=\"source\">RT.java:419</td><td class=\"method\">clojure.lang.RT.load</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5893</td><td class=\"method\">clojure.core/load[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5892</td><td class=\"method\">clojure.core/load</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5876</td><td class=\"method\">clojure.core/load</td></tr><tr class=\"java\"><td class=\"source\">RestFn.java:408</td><td class=\"method\">clojure.lang.RestFn.invoke</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5697</td><td class=\"method\">clojure.core/load-one</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5692</td><td class=\"method\">clojure.core/load-one</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5737</td><td class=\"method\">clojure.core/load-lib[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5736</td><td class=\"method\">clojure.core/load-lib</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5717</td><td class=\"method\">clojure.core/load-lib</td></tr><tr class=\"java\"><td class=\"source\">RestFn.java:142</td><td class=\"method\">clojure.lang.RestFn.applyTo</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:648</td><td class=\"method\">clojure.core/apply</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5774</td><td class=\"method\">clojure.core/load-libs</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5758</td><td class=\"method\">clojure.core/load-libs</td></tr><tr class=\"java\"><td class=\"source\">RestFn.java:137</td><td class=\"method\">clojure.lang.RestFn.applyTo</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:648</td><td class=\"method\">clojure.core/apply</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5796</td><td class=\"method\">clojure.core/require</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5796</td><td class=\"method\">clojure.core/require</td></tr><tr class=\"java\"><td class=\"source\">RestFn.java:421</td><td class=\"method\">clojure.lang.RestFn.invoke</td></tr><tr class=\"clojure\"><td class=\"source\">reload.clj:17</td><td class=\"method\">ring.middleware.reload/reloader[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">reload.clj:38</td><td class=\"method\">ring.middleware.reload/wrap-reload[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">stacktrace.clj:26</td><td class=\"method\">ring.middleware.stacktrace/wrap-stacktrace-log[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">stacktrace.clj:96</td><td class=\"method\">ring.middleware.stacktrace/wrap-stacktrace-web[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">jetty.clj:25</td><td class=\"method\">ring.adapter.jetty/proxy-handler[fn]</td></tr><tr class=\"java\"><td class=\"source\">(Unknown Source)</td><td class=\"method\">ring.adapter.jetty.proxy$org.eclipse.jetty.server.handler.AbstractHandler$ff19274a.handle</td></tr><tr class=\"java\"><td class=\"source\">HandlerWrapper.java:97</td><td class=\"method\">org.eclipse.jetty.server.handler.HandlerWrapper.handle</td></tr><tr class=\"java\"><td class=\"source\">Server.java:499</td><td class=\"method\">org.eclipse.jetty.server.Server.handle</td></tr><tr class=\"java\"><td class=\"source\">HttpChannel.java:311</td><td class=\"method\">org.eclipse.jetty.server.HttpChannel.handle</td></tr><tr class=\"java\"><td class=\"source\">HttpConnection.java:258</td><td class=\"method\">org.eclipse.jetty.server.HttpConnection.onFillable</td></tr><tr class=\"java\"><td class=\"source\">AbstractConnection.java:544</td><td class=\"method\">org.eclipse.jetty.io.AbstractConnection$2.run</td></tr><tr class=\"java\"><td class=\"source\">QueuedThreadPool.java:635</td><td class=\"method\">org.eclipse.jetty.util.thread.QueuedThreadPool.runJob</td></tr><tr class=\"java\"><td class=\"source\">QueuedThreadPool.java:555</td><td class=\"method\">org.eclipse.jetty.util.thread.QueuedThreadPool$3.run</td></tr><tr class=\"java\"><td class=\"source\">Thread.java:748</td><td class=\"method\">java.lang.Thread.run</td></tr></tbody></table></div><div id=\"causes\"><h2>Caused by <span class=\"class\">java.lang.RuntimeException</span></h2><div class=\"message\">No such namespace: d</div><div class=\"trace\"><table><tbody><tr class=\"java\"><td class=\"source\">Util.java:221</td><td class=\"method\">clojure.lang.Util.runtimeException</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:7134</td><td class=\"method\">clojure.lang.Compiler.resolveIn</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:7108</td><td class=\"method\">clojure.lang.Compiler.resolve</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:7069</td><td class=\"method\">clojure.lang.Compiler.analyzeSymbol</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6648</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6625</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:3766</td><td class=\"method\">clojure.lang.Compiler$InvokeExpr.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6870</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6625</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6001</td><td class=\"method\">clojure.lang.Compiler$BodyExpr$Parser.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6319</td><td class=\"method\">clojure.lang.Compiler$LetExpr$Parser.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6868</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6856</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6625</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6001</td><td class=\"method\">clojure.lang.Compiler$BodyExpr$Parser.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:5380</td><td class=\"method\">clojure.lang.Compiler$FnMethod.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:3972</td><td class=\"method\">clojure.lang.Compiler$FnExpr.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6866</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6856</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:38</td><td class=\"method\">clojure.lang.Compiler.access$300</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:589</td><td class=\"method\">clojure.lang.Compiler$DefExpr$Parser.parse</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6868</td><td class=\"method\">clojure.lang.Compiler.analyzeSeq</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6669</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6625</td><td class=\"method\">clojure.lang.Compiler.analyze</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:6931</td><td class=\"method\">clojure.lang.Compiler.eval</td></tr><tr class=\"java\"><td class=\"source\">Compiler.java:7379</td><td class=\"method\">clojure.lang.Compiler.load</td></tr><tr class=\"java\"><td class=\"source\">RT.java:372</td><td class=\"method\">clojure.lang.RT.loadResourceScript</td></tr><tr class=\"java\"><td class=\"source\">RT.java:363</td><td class=\"method\">clojure.lang.RT.loadResourceScript</td></tr><tr class=\"java\"><td class=\"source\">RT.java:453</td><td class=\"method\">clojure.lang.RT.load</td></tr><tr class=\"java\"><td class=\"source\">RT.java:419</td><td class=\"method\">clojure.lang.RT.load</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5893</td><td class=\"method\">clojure.core/load[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5892</td><td class=\"method\">clojure.core/load</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5876</td><td class=\"method\">clojure.core/load</td></tr><tr class=\"java\"><td class=\"source\">RestFn.java:408</td><td class=\"method\">clojure.lang.RestFn.invoke</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5697</td><td class=\"method\">clojure.core/load-one</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5692</td><td class=\"method\">clojure.core/load-one</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5737</td><td class=\"method\">clojure.core/load-lib[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5736</td><td class=\"method\">clojure.core/load-lib</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5717</td><td class=\"method\">clojure.core/load-lib</td></tr><tr class=\"java\"><td class=\"source\">RestFn.java:142</td><td class=\"method\">clojure.lang.RestFn.applyTo</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:648</td><td class=\"method\">clojure.core/apply</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5774</td><td class=\"method\">clojure.core/load-libs</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5758</td><td class=\"method\">clojure.core/load-libs</td></tr><tr class=\"java\"><td class=\"source\">RestFn.java:137</td><td class=\"method\">clojure.lang.RestFn.applyTo</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:648</td><td class=\"method\">clojure.core/apply</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5796</td><td class=\"method\">clojure.core/require</td></tr><tr class=\"clojure\"><td class=\"source\">core.clj:5796</td><td class=\"method\">clojure.core/require</td></tr><tr class=\"java\"><td class=\"source\">RestFn.java:421</td><td class=\"method\">clojure.lang.RestFn.invoke</td></tr><tr class=\"clojure\"><td class=\"source\">reload.clj:17</td><td class=\"method\">ring.middleware.reload/reloader[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">reload.clj:38</td><td class=\"method\">ring.middleware.reload/wrap-reload[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">stacktrace.clj:26</td><td class=\"method\">ring.middleware.stacktrace/wrap-stacktrace-log[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">stacktrace.clj:96</td><td class=\"method\">ring.middleware.stacktrace/wrap-stacktrace-web[fn]</td></tr><tr class=\"clojure\"><td class=\"source\">jetty.clj:25</td><td class=\"method\">ring.adapter.jetty/proxy-handler[fn]</td></tr><tr class=\"java\"><td class=\"source\">(Unknown Source)</td><td class=\"method\">ring.adapter.jetty.proxy$org.eclipse.jetty.server.handler.AbstractHandler$ff19274a.handle</td></tr><tr class=\"java\"><td class=\"source\">HandlerWrapper.java:97</td><td class=\"method\">org.eclipse.jetty.server.handler.HandlerWrapper.handle</td></tr><tr class=\"java\"><td class=\"source\">Server.java:499</td><td class=\"method\">org.eclipse.jetty.server.Server.handle</td></tr><tr class=\"java\"><td class=\"source\">HttpChannel.java:311</td><td class=\"method\">org.eclipse.jetty.server.HttpChannel.handle</td></tr><tr class=\"java\"><td class=\"source\">HttpConnection.java:258</td><td class=\"method\">org.eclipse.jetty.server.HttpConnection.onFillable</td></tr><tr class=\"java\"><td class=\"source\">AbstractConnection.java:544</td><td class=\"method\">org.eclipse.jetty.io.AbstractConnection$2.run</td></tr><tr class=\"java\"><td class=\"source\">QueuedThreadPool.java:635</td><td class=\"method\">org.eclipse.jetty.util.thread.QueuedThreadPool.runJob</td></tr><tr class=\"java\"><td class=\"source\">QueuedThreadPool.java:555</td><td class=\"method\">org.eclipse.jetty.util.thread.QueuedThreadPool$3.run</td></tr><tr class=\"java\"><td class=\"source\">Thread.java:748</td><td class=\"method\">java.lang.Thread.run</td></tr></tbody></table></div></div></div></body></html>
" #("  :db/unique       :db.unique/identity" 0 2 (help-echo cider--help-echo fontified t cider-locals nil) 2 3 (help-echo cider--help-echo fontified t cider-locals nil face (clojure-keyword-face)) 3 5 (help-echo cider--help-echo fontified t cider-locals nil face (font-lock-type-face clojure-keyword-face)) 5 6 (help-echo cider--help-echo fontified t cider-locals nil face (default clojure-keyword-face)) 6 12 (help-echo cider--help-echo fontified t cider-locals nil face (clojure-keyword-face)) 12 19 (help-echo cider--help-echo fontified t cider-locals nil) 19 20 (help-echo cider--help-echo fontified t cider-locals nil face (clojure-keyword-face)) 20 29 (help-echo cider--help-echo fontified t cider-locals nil face (font-lock-type-face clojure-keyword-face)) 29 30 (help-echo cider--help-echo fontified t cider-locals nil face (default clojure-keyword-face)) 30 38 (help-echo cider--help-echo fontified t cider-locals nil face (clojure-keyword-face))) #("{:db/ident        :user/username
  :db/valueType    :db.type/string
  :db/cardinality  :db.cardinality/one
  :db/doc          \"This is user's username\"
  :db/unique       :db.unique/identity}" 0 1 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 2 4 (fontified t help-echo cider--help-echo cider-locals nil face (font-lock-type-face clojure-keyword-face)) 4 5 (fontified t help-echo cider--help-echo cider-locals nil face (default clojure-keyword-face)) 5 10 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 10 18 (fontified t help-echo cider--help-echo cider-locals nil) 18 19 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 19 23 (fontified t help-echo cider--help-echo cider-locals nil face (font-lock-type-face clojure-keyword-face)) 23 24 (fontified t help-echo cider--help-echo cider-locals nil face (default clojure-keyword-face)) 24 32 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 32 33 (fontified t help-echo cider--help-echo cider-locals nil) 33 35 (fontified t help-echo cider--help-echo cider-locals nil) 35 36 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 36 38 (fontified t help-echo cider--help-echo cider-locals nil face (font-lock-type-face clojure-keyword-face)) 38 39 (fontified t help-echo cider--help-echo cider-locals nil face (default clojure-keyword-face)) 39 48 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 48 52 (fontified t help-echo cider--help-echo cider-locals nil) 52 53 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 53 60 (fontified t help-echo cider--help-echo cider-locals nil face (font-lock-type-face clojure-keyword-face)) 60 61 (fontified t help-echo cider--help-echo cider-locals nil face (default clojure-keyword-face)) 61 67 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 67 68 (fontified t help-echo cider--help-echo cider-locals nil) 68 70 (fontified t help-echo cider--help-echo cider-locals nil) 70 71 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 71 73 (fontified t help-echo cider--help-echo cider-locals nil face (font-lock-type-face clojure-keyword-face)) 73 74 (fontified t help-echo cider--help-echo cider-locals nil face (default clojure-keyword-face)) 74 85 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 85 87 (fontified t help-echo cider--help-echo cider-locals nil) 87 88 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 88 102 (fontified t help-echo cider--help-echo cider-locals nil face (font-lock-type-face clojure-keyword-face)) 102 103 (fontified t help-echo cider--help-echo cider-locals nil face (default clojure-keyword-face)) 103 106 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 106 107 (fontified t help-echo cider--help-echo cider-locals nil) 107 109 (fontified t help-echo cider--help-echo cider-locals nil) 109 110 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 110 112 (fontified t help-echo cider--help-echo cider-locals nil face (font-lock-type-face clojure-keyword-face)) 112 113 (fontified t help-echo cider--help-echo cider-locals nil face (default clojure-keyword-face)) 113 116 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 116 126 (fontified t help-echo cider--help-echo cider-locals nil) 126 150 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-string-face) 150 151 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-string-face) 151 152 (fontified t help-echo cider--help-echo cider-locals nil) 152 154 (fontified t help-echo cider--help-echo cider-locals nil) 154 155 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 155 157 (fontified t help-echo cider--help-echo cider-locals nil face (font-lock-type-face clojure-keyword-face)) 157 158 (fontified t help-echo cider--help-echo cider-locals nil face (default clojure-keyword-face)) 158 164 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 164 171 (fontified t help-echo cider--help-echo cider-locals nil) 171 172 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 172 181 (fontified t help-echo cider--help-echo cider-locals nil face (font-lock-type-face clojure-keyword-face)) 181 182 (fontified t help-echo cider--help-echo cider-locals nil face (default clojure-keyword-face)) 182 190 (fontified t help-echo cider--help-echo cider-locals nil face (clojure-keyword-face)) 190 191 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-2-face))) "\"datomic:sql://test?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic\"" "" #("datomic:mem://account-service-test-db" 0 37 (fontified t help-echo cider--help-echo cider-locals ("uri") face font-lock-string-face)) #("(defn create-empty-in-memory-db []
  (let [uri \"datomic:mem://account-service-test-db\"]
    (d/delete-database uri)
    (d/create-database uri)
    (let [conn (d/connect uri)
          schema (read-string (slurp \"resources/schema.dtm\"))]
      (d/transact conn schema)
      conn)))" 0 1 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-1-face)) 1 5 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-keyword-face) 5 6 (fontified t help-echo cider--help-echo cider-locals nil) 6 31 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-function-name-face) 31 32 (fontified t help-echo cider--help-echo cider-locals nil) 32 33 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-2-face)) 33 34 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t help-echo cider--help-echo cider-locals nil) 35 37 (fontified t help-echo cider--help-echo cider-locals nil) 37 38 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-2-face)) 38 41 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-keyword-face) 41 42 (fontified t help-echo cider--help-echo cider-locals ("uri")) 42 43 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 43 47 (fontified t help-echo cider--help-echo cider-locals ("uri")) 47 86 (fontified t help-echo cider--help-echo cider-locals ("uri") face font-lock-string-face) 86 87 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 87 88 (fontified t help-echo cider--help-echo cider-locals ("uri")) 88 92 (fontified t help-echo cider--help-echo cider-locals ("uri")) 92 93 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 93 94 (fontified t help-echo cider--help-echo cider-locals ("uri") face font-lock-type-face) 94 95 (fontified t help-echo cider--help-echo cider-locals ("uri") face default) 95 114 (fontified t help-echo cider--help-echo cider-locals ("uri")) 114 115 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 115 116 (fontified t help-echo cider--help-echo cider-locals ("uri")) 116 120 (fontified t help-echo cider--help-echo cider-locals ("uri")) 120 121 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 121 122 (fontified t help-echo cider--help-echo cider-locals ("uri") face font-lock-type-face) 122 123 (fontified t help-echo cider--help-echo cider-locals ("uri") face default) 123 142 (fontified t help-echo cider--help-echo cider-locals ("uri")) 142 143 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 143 144 (fontified t help-echo cider--help-echo cider-locals ("uri")) 144 148 (fontified t help-echo cider--help-echo cider-locals ("uri")) 148 149 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 149 152 (fontified t help-echo cider--help-echo cider-locals ("uri") face font-lock-keyword-face) 152 153 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 153 154 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-4-face)) 154 159 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 159 160 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-5-face)) 160 161 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face font-lock-type-face) 161 162 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face default) 162 173 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 173 174 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-5-face)) 174 175 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 175 192 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 192 193 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-5-face)) 193 204 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face font-lock-builtin-face) 204 205 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 205 206 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-6-face)) 206 211 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face font-lock-builtin-face) 211 212 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 212 234 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face font-lock-string-face) 234 235 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-6-face)) 235 236 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-5-face)) 236 237 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-4-face)) 237 238 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 238 244 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 244 245 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-4-face)) 245 246 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face font-lock-type-face) 246 247 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face default) 247 267 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 267 268 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-4-face)) 268 269 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 269 279 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 279 280 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-3-face)) 280 281 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-2-face)) 281 282 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-1-face))) #("(defn create-empty-in-memory-db []
  (let [uri \"datomic:mem://account-service-test-db\"]
    (d/delete-database uri)
    (d/create-database uri)
    (let [conn (d/connect uri)
          schema (read-string (slurp \"resources/schema.dtm\"))]
      (d/transact conn schema)
      conn)))" 0 1 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-1-face)) 1 5 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-keyword-face) 5 6 (fontified t help-echo cider--help-echo cider-locals nil) 6 31 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-function-name-face) 31 32 (fontified t help-echo cider--help-echo cider-locals nil) 32 33 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-2-face)) 33 34 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t help-echo cider--help-echo cider-locals nil) 35 37 (fontified t help-echo cider--help-echo cider-locals nil) 37 38 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-2-face)) 38 41 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-keyword-face) 41 42 (fontified t help-echo cider--help-echo cider-locals ("uri")) 42 43 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 43 47 (fontified t help-echo cider--help-echo cider-locals ("uri")) 47 86 (fontified t help-echo cider--help-echo cider-locals ("uri") face font-lock-string-face) 86 87 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 87 88 (fontified t help-echo cider--help-echo cider-locals ("uri")) 88 92 (fontified t help-echo cider--help-echo cider-locals ("uri")) 92 93 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 93 94 (fontified t help-echo cider--help-echo cider-locals ("uri") face font-lock-type-face) 94 95 (fontified t help-echo cider--help-echo cider-locals ("uri") face default) 95 114 (fontified t help-echo cider--help-echo cider-locals ("uri")) 114 115 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 115 116 (fontified t help-echo cider--help-echo cider-locals ("uri")) 116 120 (fontified t help-echo cider--help-echo cider-locals ("uri")) 120 121 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 121 122 (fontified t help-echo cider--help-echo cider-locals ("uri") face font-lock-type-face) 122 123 (fontified t help-echo cider--help-echo cider-locals ("uri") face default) 123 142 (fontified t help-echo cider--help-echo cider-locals ("uri")) 142 143 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 143 144 (fontified t help-echo cider--help-echo cider-locals ("uri")) 144 148 (fontified t help-echo cider--help-echo cider-locals ("uri")) 148 149 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-3-face)) 149 152 (fontified t help-echo cider--help-echo cider-locals ("uri") face font-lock-keyword-face) 152 153 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 153 154 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-4-face)) 154 159 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 159 160 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-5-face)) 160 161 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face font-lock-type-face) 161 162 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face default) 162 173 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 173 174 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-5-face)) 174 175 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 175 192 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 192 193 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-5-face)) 193 204 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face font-lock-builtin-face) 204 205 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 205 206 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-6-face)) 206 211 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face font-lock-builtin-face) 211 212 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 212 234 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face font-lock-string-face) 234 235 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-6-face)) 235 236 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-5-face)) 236 237 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-4-face)) 237 238 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 238 244 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 244 245 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-4-face)) 245 246 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face font-lock-type-face) 246 247 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face default) 247 267 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 267 268 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-4-face)) 268 269 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 269 279 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn")) 279 280 (fontified t help-echo cider--help-echo cider-locals ("uri" "schema" "conn") face (rainbow-delimiters-depth-3-face)) 280 281 (fontified t help-echo cider--help-echo cider-locals ("uri") face (rainbow-delimiters-depth-2-face)) 281 282 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-1-face))) #("{sult (+ x y)}" 0 1 (fontified t face (rainbow-delimiters-depth-6-face)) 1 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-7-face)) 7 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-7-face)) 13 14 (fontified t face (rainbow-delimiters-depth-6-face))) #("(s/defschema Register
  {:username s/Str
   :password s/Str})

" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face default) 3 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 21 (fontified t face font-lock-function-name-face) 21 22 (fontified t) 22 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 34 (fontified t face (clojure-keyword-face)) 34 35 (fontified t) 35 36 (fontified t face font-lock-type-face) 36 37 (fontified t face default) 37 40 (fontified t face font-lock-type-face) 40 41 (fontified t) 41 44 (fontified t) 44 53 (fontified t face (clojure-keyword-face)) 53 54 (fontified t) 54 55 (fontified t face font-lock-type-face) 55 56 (fontified t face default) 56 59 (fontified t face font-lock-type-face) 59 60 (fontified t face (rainbow-delimiters-depth-2-face)) 60 61 (fontified t face (rainbow-delimiters-depth-1-face)) 61 62 (fontified t) 62 63 (fontified t)) #("{:result Boolean
                           :}" 0 1 (fontified t face (rainbow-delimiters-depth-5-face)) 1 8 (fontified t face (clojure-keyword-face)) 8 9 (fontified t) 9 16 (fontified t face font-lock-type-face) 16 17 (fontified t) 17 45 (fontified t) 45 46 (fontified t face (rainbow-delimiters-depth-5-face))) #("   s/Str" 0 3 (fontified t) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face default) 5 8 (fontified t face font-lock-type-face)) "defsc" #("(s/defschema Register
  {:username s/Str
   :password s/Str})" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face default) 3 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 21 (fontified t face font-lock-function-name-face) 21 22 (fontified t) 22 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 34 (fontified t face (clojure-keyword-face)) 34 35 (fontified t) 35 36 (fontified t face font-lock-type-face) 36 37 (fontified t face default) 37 40 (fontified t face font-lock-type-face) 40 41 (fontified t) 41 44 (fontified t) 44 53 (fontified t face (clojure-keyword-face)) 53 54 (fontified t) 54 55 (fontified t face font-lock-type-face) 55 56 (fontified t face default) 56 59 (fontified t face font-lock-type-face) 59 60 (fontified t face (rainbow-delimiters-depth-2-face)) 60 61 (fontified t face (rainbow-delimiters-depth-1-face))) #("(s/defschema Register
  {:username s/Str
   :password s/Str})" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face default) 3 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 21 (fontified t face font-lock-function-name-face) 21 22 (fontified t) 22 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 34 (fontified t face (clojure-keyword-face)) 34 35 (fontified t) 35 36 (fontified t face font-lock-type-face) 36 37 (fontified t face default) 37 40 (fontified t face font-lock-type-face) 40 41 (fontified t) 41 44 (fontified t) 44 53 (fontified t face (clojure-keyword-face)) 53 54 (fontified t) 54 55 (fontified t face font-lock-type-face) 55 56 (fontified t face default) 56 59 (fontified t face font-lock-type-face) 59 60 (fontified t face (rainbow-delimiters-depth-2-face)) 60 61 (fontified t face (rainbow-delimiters-depth-1-face))) #("(s/optional-key :description) s/Str
   :size (s/enum :L :M :S)
   :origin {:country (s/enum :FI :PO)
            :city s/Str}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face default) 3 16 (fontified t) 16 28 (fontified t face (clojure-keyword-face)) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 30 (fontified t) 30 31 (fontified t face font-lock-type-face) 31 32 (fontified t face default) 32 35 (fontified t face font-lock-type-face) 35 36 (fontified t) 36 39 (fontified t) 39 44 (face (clojure-keyword-face) fontified t) 44 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-3-face) fontified t) 46 47 (face font-lock-type-face fontified t) 47 48 (face default fontified t) 48 53 (fontified t) 53 55 (face (clojure-keyword-face) fontified t) 55 56 (fontified t) 56 58 (face (clojure-keyword-face) fontified t) 58 59 (fontified t) 59 61 (face (clojure-keyword-face) fontified t) 61 62 (face (rainbow-delimiters-depth-3-face) fontified t) 62 63 (fontified t) 63 66 (fontified t) 66 73 (face (clojure-keyword-face) fontified t) 73 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-3-face) fontified t) 75 83 (face (clojure-keyword-face) fontified t) 83 84 (fontified t) 84 85 (face (rainbow-delimiters-depth-4-face) fontified t) 85 86 (face font-lock-type-face fontified t) 86 87 (face default fontified t) 87 92 (fontified t) 92 95 (face (clojure-keyword-face) fontified t) 95 96 (fontified t) 96 99 (face (clojure-keyword-face) fontified t) 99 100 (face (rainbow-delimiters-depth-4-face) fontified t) 100 101 (fontified t) 101 113 (fontified t) 113 118 (face (clojure-keyword-face) fontified t) 118 119 (fontified t) 119 120 (face font-lock-type-face fontified t) 120 121 (face default fontified t) 121 124 (face font-lock-type-face fontified t) 124 125 (face (rainbow-delimiters-depth-3-face) fontified t)) #(":repositories {\"my.datomic.com\" {:url \"https://my.datomic.com/repo\"
                                   :creds :gpg}}" 0 13 (fontified t face (clojure-keyword-face)) 13 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 31 (fontified t face font-lock-string-face) 31 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 37 (fontified t face (clojure-keyword-face)) 37 38 (fontified t) 38 51 (fontified t face font-lock-string-face) 51 67 (fontified t face font-lock-string-face) 67 68 (fontified t) 68 103 (fontified t) 103 109 (fontified t face (clojure-keyword-face)) 109 110 (fontified t) 110 114 (fontified t face (clojure-keyword-face)) 114 115 (fontified t face (rainbow-delimiters-depth-3-face)) 115 116 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face))) #(":repositories {\"my.datomic.com\" {:url \"https://my.datomic.com/repo\"
                                   :creds :gpg}}" 0 13 (fontified t face (clojure-keyword-face)) 13 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 31 (fontified t face font-lock-string-face) 31 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 37 (fontified t face (clojure-keyword-face)) 37 38 (fontified t) 38 51 (fontified t face font-lock-string-face) 51 67 (fontified t face font-lock-string-face) 67 68 (fontified t) 68 103 (fontified t) 103 109 (fontified t face (clojure-keyword-face)) 109 110 (fontified t) 110 114 (fontified t face (clojure-keyword-face)) 114 115 (fontified t face (rainbow-delimiters-depth-3-face)) 115 116 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face))) #("[com.datomic/datomic-pro \"0.9.5561.62\"]
                 [org.postgresql/postgresql \"9.3-1102-jdbc41\"]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 12 (fontified t face font-lock-type-face) 12 13 (fontified t face default) 13 25 (fontified t) 25 26 (fontified t face font-lock-string-face) 26 36 (fontified t face font-lock-string-face) 36 37 (fontified t rear-nonsticky t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-3-face)) 39 40 (fontified t) 40 57 (fontified t) 57 58 (fontified t face (rainbow-delimiters-depth-3-face)) 58 72 (fontified t face font-lock-type-face) 72 73 (fontified t face default) 73 84 (fontified t) 84 101 (fontified t face font-lock-string-face) 101 102 (fontified t face (rainbow-delimiters-depth-3-face))) #("[com.datomic/datomic-pro \"0.9.5561.62\"]
                 [org.postgresql/postgresql \"9.3-1102-jdbc41\"]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 12 (fontified t face font-lock-type-face) 12 13 (fontified t face default) 13 25 (fontified t) 25 26 (fontified t face font-lock-string-face) 26 36 (fontified t face font-lock-string-face) 36 37 (fontified t rear-nonsticky t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-3-face)) 39 40 (fontified t) 40 57 (fontified t) 57 58 (fontified t face (rainbow-delimiters-depth-3-face)) 58 72 (fontified t face font-lock-type-face) 72 73 (fontified t face default) 73 84 (fontified t) 84 101 (fontified t face font-lock-string-face) 101 102 (fontified t face (rainbow-delimiters-depth-3-face))) #("{:db-uri \"datomic:sql://localhost:4334/datomic\"}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 8 (fontified t face (clojure-keyword-face)) 8 9 (fontified t) 9 47 (fontified t face font-lock-string-face) 47 48 (fontified t face (rainbow-delimiters-depth-4-face))) #("\"datomic:sql://test?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic\"" 0 1 (fontified t face font-lock-string-face) 1 89 (fontified t face font-lock-string-face) 89 90 (rear-nonsticky t fontified t face font-lock-string-face) 90 91 (fontified t face font-lock-string-face)) #("\"datomic:sql://test?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic\"" 0 1 (fontified t face font-lock-string-face) 1 89 (fontified t face font-lock-string-face) 89 90 (rear-nonsticky t fontified t face font-lock-string-face) 90 91 (fontified t face font-lock-string-face)) #("\"datomic:sql://tes?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic\"" 0 1 (fontified t face font-lock-string-face) 1 88 (fontified t face font-lock-string-face) 88 89 (rear-nonsticky t fontified t face font-lock-string-face) 89 90 (fontified t face font-lock-string-face)) #("\"datomic:sql://tes?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic\"" 0 1 (fontified t face font-lock-string-face) 1 88 (fontified t face font-lock-string-face) 88 89 (rear-nonsticky t fontified t face font-lock-string-face) 89 90 (fontified t face font-lock-string-face)) #("\"datomic:sql://test?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic\"" 0 1 (fontified t face font-lock-string-face) 1 89 (fontified t face font-lock-string-face) 89 90 (rear-nonsticky t fontified t face font-lock-string-face) 90 91 (fontified t face font-lock-string-face)) #("\"datomic:sql://test?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic\"" 0 1 (fontified t face font-lock-string-face) 1 89 (fontified t face font-lock-string-face) 89 90 (rear-nonsticky t fontified t face font-lock-string-face) 90 91 (fontified t face font-lock-string-face)) #("datomic:sql://testdb?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic" 0 90 (fontified t) 90 91 (fontified t rear-nonsticky t)) #("datomic:sql://testdb?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic" 0 90 (fontified t) 90 91 (fontified t rear-nonsticky t)) "datomic:sql://<DB-NAME>?jdbc:postgresql://localhost:5433/datomic?user=datomic&password=datomic" "Fso7LdEQZsP4Ui8wd3WqoMtD8yVmz1CUQcbC3ybya6hlzixT8/\\
p21o53lxdgD8ZUZUhycwzSkRWHzPjeEfCZOaUr3OW0JqiPPnpiMBRe3NbvVvnf\\
94ORo41Byn6VksVHBx1pCvmO9c9niypICyEGhOEt13uSP7UwfvcFG4qPfg3s8h\\
vL27jnDsO52MfQiJRKy0SpTAhC7KXbQ1830pEJA6CSLsu0K5yjJnrd8cI/923n\\
oBJBsf2SAJlApy8znbnj/UXWj29Ktt9UqXeN9gKWtp9WUmW2HFPxIpQWRmueOC\\
HuAMvEVf4C8Av6SW53P7EFmDK66jQQkyEJ/kQ2JJCVqg==" "[org.postgresql/postgresql \"9.3-1102-jdbc41\"]
" "0.9.5561.62" "[com.datomic/datomic-pro $VERSION]" ":repositories {\"my.datomic.com\" {:url \"https://my.datomic.com/repo\"
                                 :creds :gpg}}" #("{#my.datomic.com {:username ram@mygram.me
                  :password b3f59971-92be-4100-adb4-a2cb4f21079a}}" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t) 2 16 (fontified t face font-lock-type-face) 16 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 27 (fontified t face (clojure-keyword-face)) 27 32 (fontified t) 32 41 (fontified t face font-lock-type-face) 41 60 (fontified t) 60 69 (fontified t face (clojure-keyword-face)) 69 91 (fontified t) 91 106 (fontified t) 106 107 (fontified t face (rainbow-delimiters-depth-2-face)) 107 108 (fontified t face (rainbow-delimiters-depth-1-face))) "{#\"my\\.datomic\\.com\" {:username \"er.puneetpahuja@gmail.com\"
                      :password \"cca3b7e0-1538-498e-9c6a-bc35244a3d5b\"}}" "(defun split-window-right-ignore (&optional size)
  (if (car size) size (list (/ (window-total-width) 2))))

(advice-add 'split-window-right :filter-args
            'split-window-right-ignore)" #("
                 [org.postgresql/postgresql \"9.3-1102-jdbc41\"]" 0 1 (fontified t) 1 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 33 (face font-lock-type-face fontified t) 33 34 (face default fontified t) 34 45 (fontified t) 45 62 (face font-lock-string-face fontified t) 62 63 (face (rainbow-delimiters-depth-3-face) fontified t)) #("[org.postgresql/postgresql \"9.3-1102-jdbc41\"]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 15 (face font-lock-type-face fontified t) 15 16 (face default fontified t) 16 27 (fontified t) 27 44 (face font-lock-string-face fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t)) "(require 'lockstep)" #("(defn on-js-reload []
  ;; optionally touch your app-state to force rerendering depending on
  ;; your application
  ;; (swap! app-state update-in [:__figwheel_counter] inc)
)" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 18 (face font-lock-function-name-face fontified t) 18 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 24 (fontified t) 24 27 (face font-lock-comment-delimiter-face fontified t) 27 93 (face font-lock-comment-face fontified t) 93 95 (fontified t) 95 98 (face font-lock-comment-delimiter-face fontified t) 98 115 (face font-lock-comment-face fontified t) 115 117 (fontified t) 117 120 (face font-lock-comment-delimiter-face fontified t) 120 148 (face font-lock-comment-face fontified t) 148 167 (face (font-lock-comment-face clojure-keyword-face) fontified t) 167 174 (face font-lock-comment-face fontified t) 174 175 (face (rainbow-delimiters-depth-1-face) fontified t)) "ratom" #("src/whip/core.cljs. edit it and see reloading in action." 0 56 (face font-lock-string-face fontified t)) #("src/whip/core.cljs. edit it and see reloading in action." 0 56 (face font-lock-string-face fontified t)) #("(println)
  (println (params/params-request request))
  (println)
  (println (params/wrap-params identity))" 0 1 (face (rainbow-delimiters-depth-2-face) cider-locals ("request") fontified t help-echo cider--help-echo) 1 8 (face font-lock-builtin-face cider-locals ("request") fontified t help-echo cider--help-echo) 8 9 (face (rainbow-delimiters-depth-2-face) cider-locals ("request") fontified t help-echo cider--help-echo rear-nonsticky t) 9 10 (cider-locals ("request") fontified t help-echo cider--help-echo) 10 12 (help-echo cider--help-echo fontified t cider-locals ("request")) 12 13 (help-echo cider--help-echo fontified t cider-locals ("request") face (rainbow-delimiters-depth-2-face)) 13 20 (help-echo cider--help-echo fontified t cider-locals ("request") face font-lock-builtin-face) 20 21 (help-echo cider--help-echo fontified t cider-locals ("request")) 21 22 (help-echo cider--help-echo fontified t cider-locals ("request") face (rainbow-delimiters-depth-3-face)) 22 28 (help-echo cider--help-echo fontified t cider-locals ("request") face font-lock-type-face) 28 29 (help-echo cider--help-echo fontified t cider-locals ("request") face default) 29 51 (help-echo cider--help-echo fontified t cider-locals ("request")) 51 52 (help-echo cider--help-echo fontified t cider-locals ("request") face (rainbow-delimiters-depth-3-face)) 52 53 (rear-nonsticky t help-echo cider--help-echo fontified t cider-locals ("request") face (rainbow-delimiters-depth-2-face)) 53 54 (cider-locals ("request") fontified t help-echo cider--help-echo) 54 56 (help-echo cider--help-echo fontified t cider-locals ("request")) 56 57 (help-echo cider--help-echo fontified t cider-locals ("request") face (rainbow-delimiters-depth-2-face)) 57 64 (help-echo cider--help-echo fontified t cider-locals ("request") face font-lock-builtin-face) 64 65 (rear-nonsticky t help-echo cider--help-echo fontified t cider-locals ("request") face (rainbow-delimiters-depth-2-face)) 65 66 (cider-locals ("request") fontified t help-echo cider--help-echo) 66 68 (help-echo cider--help-echo fontified t cider-locals ("request")) 68 69 (help-echo cider--help-echo fontified t cider-locals ("request") face (rainbow-delimiters-depth-2-face)) 69 76 (help-echo cider--help-echo fontified t cider-locals ("request") face font-lock-builtin-face) 76 77 (help-echo cider--help-echo fontified t cider-locals ("request")) 77 78 (help-echo cider--help-echo fontified t cider-locals ("request") face (rainbow-delimiters-depth-3-face)) 78 84 (help-echo cider--help-echo fontified t cider-locals ("request") face font-lock-type-face) 84 85 (help-echo cider--help-echo fontified t cider-locals ("request") face default) 85 89 (help-echo cider--help-echo fontified t cider-locals ("request")) 89 105 (help-echo cider--help-echo fontified t cider-locals ("request")) 105 106 (help-echo cider--help-echo fontified t cider-locals ("request") face (rainbow-delimiters-depth-3-face)) 106 107 (rear-nonsticky t help-echo cider--help-echo fontified t cider-locals ("request") face (rainbow-delimiters-depth-2-face))) #("(println (params/assoc-form-params request \"UTF-8\"))
  (println)
" 0 1 (fontified t help-echo cider--help-echo cider-locals ("request") face (rainbow-delimiters-depth-2-face)) 1 8 (fontified t help-echo cider--help-echo cider-locals ("request") face font-lock-builtin-face) 8 9 (fontified t help-echo cider--help-echo cider-locals ("request")) 9 10 (fontified t help-echo cider--help-echo cider-locals ("request") face (rainbow-delimiters-depth-3-face)) 10 16 (fontified t help-echo cider--help-echo cider-locals ("request") face font-lock-type-face) 16 17 (fontified t help-echo cider--help-echo cider-locals ("request") face default) 17 43 (fontified t help-echo cider--help-echo cider-locals ("request")) 43 48 (fontified t help-echo cider--help-echo cider-locals ("request") face font-lock-string-face) 48 49 (fontified t help-echo cider--help-echo cider-locals ("request") face font-lock-string-face) 49 50 (fontified t help-echo cider--help-echo cider-locals ("request") face font-lock-string-face) 50 51 (fontified t help-echo cider--help-echo cider-locals ("request") face (rainbow-delimiters-depth-3-face)) 51 52 (fontified t rear-nonsticky t help-echo cider--help-echo cider-locals ("request") face (rainbow-delimiters-depth-2-face)) 52 53 (fontified t help-echo cider--help-echo cider-locals ("request")) 53 55 (cider-locals ("request") help-echo cider--help-echo fontified t) 55 56 (face (rainbow-delimiters-depth-2-face) cider-locals ("request") help-echo cider--help-echo fontified t) 56 63 (face font-lock-builtin-face cider-locals ("request") help-echo cider--help-echo fontified t) 63 64 (face (rainbow-delimiters-depth-2-face) cider-locals ("request") help-echo cider--help-echo rear-nonsticky t fontified t) 64 65 (fontified t help-echo cider--help-echo cider-locals ("request"))) #("(println)" 0 1 (face (rainbow-delimiters-depth-2-face) cider-locals ("request") help-echo cider--help-echo fontified t) 1 8 (face font-lock-builtin-face cider-locals ("request") help-echo cider--help-echo fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) cider-locals ("request") help-echo cider--help-echo fontified t)) "http://127.0.0.1:8080/" #("(println (params/assoc-form-params request \"UTF-8\"))" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 8 (face font-lock-builtin-face fontified t) 8 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 16 (face font-lock-type-face fontified t) 16 17 (face default fontified t) 17 43 (fontified t) 43 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 51 (face (rainbow-delimiters-depth-3-face) fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t)) "" #("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 100 :family \"pfdin\")))))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 18 (fontified t) 18 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 237 (face font-lock-comment-face fontified t) 237 239 (fontified t) 239 240 (face (rainbow-delimiters-depth-2-face) fontified t) 240 248 (fontified t) 248 249 (face (rainbow-delimiters-depth-3-face) fontified t) 249 250 (face (rainbow-delimiters-depth-4-face) fontified t) 250 252 (fontified t) 252 253 (face (rainbow-delimiters-depth-5-face) fontified t) 253 260 (face font-lock-builtin-face fontified t) 260 265 (fontified t) 265 272 (face font-lock-builtin-face fontified t) 272 273 (fontified t) 273 279 (face font-lock-string-face fontified t) 279 280 (face font-lock-string-face fontified t) 280 281 (face (rainbow-delimiters-depth-5-face) fontified t) 281 282 (face (rainbow-delimiters-depth-4-face) fontified t) 282 283 (face (rainbow-delimiters-depth-3-face) fontified t) 283 284 (face (rainbow-delimiters-depth-2-face) fontified t) 284 285 (face (rainbow-delimiters-depth-1-face) fontified t)) #("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 100 :family \"pfdin\")))))" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 18 (fontified t) 18 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 237 (face font-lock-comment-face fontified t) 237 239 (fontified t) 239 240 (face (rainbow-delimiters-depth-2-face) fontified t) 240 248 (fontified t) 248 249 (face (rainbow-delimiters-depth-3-face) fontified t) 249 250 (face (rainbow-delimiters-depth-4-face) fontified t) 250 252 (fontified t) 252 253 (face (rainbow-delimiters-depth-5-face) fontified t) 253 260 (face font-lock-builtin-face fontified t) 260 265 (fontified t) 265 272 (face font-lock-builtin-face fontified t) 272 273 (fontified t) 273 279 (face font-lock-string-face fontified t) 279 280 (face font-lock-string-face fontified t) 280 281 (face (rainbow-delimiters-depth-5-face) fontified t) 281 282 (face (rainbow-delimiters-depth-4-face) fontified t) 282 283 (face (rainbow-delimiters-depth-3-face) fontified t) 283 284 (face (rainbow-delimiters-depth-2-face) fontified t) 284 285 (face (rainbow-delimiters-depth-1-face) fontified t)) #("mon-wrapper ()
  (let ((completion-at-point-functions completion-at-point-functions-saved))
    (company-complete-common)))

(setq company-minimum-prefix-length 2)
(setq company-idle-delay 0.3)


(require 'highlight-symbol)
(global-set-key [(control f3)] 'highlight-symbol)
(global-set-key [f3] 'highlight-symbol-next)
(global-set-key [(shift f3)] 'highlight-symbol-prev)
(global-set-key [(meta shift f3)] 'highlight-symbol-query-replace)



;; (define-key company-mode-map [remap indent-for-tab-command]
;;   'company-indent-for-tab-command)
(defun after-packages-loaded-hook ()
  (require 'magit)
  (setq magit-auto-revert-mode nil))
(add-hook 'after-init-hook
          #'(lambda ()
              (after-packages-loaded-hook)))


;; make git commit message 72 columns wide
(use-package git-commit
  :ensure nil
  :preface
  (defun me/git-commit-set-fill-column ()
    (setq-local comment-auto-fill-only-comments nil)
    (setq fill-column 72))
  :config
  (advice-add 'git-commit-turn-on-auto-fill :before #'me/git-commit-set-fill-column))

(add-hook 'before-save-hook 'whitespace-cleanup)
(desktop-save-mode 1)
(setq desktop-path '(\"~/.emacs.d/desktop\"))
(setq desktop-dirname \"~/.emacs.d/desktop\")
(setq desktop-base-file-name \"emacs-desktop\")
; (cider-jack-in)

;; ruler fci

(setq-default fill-column 80)

(require 'fill-column-indicator)

(define-globalized-minor-mode global-fci-mode fci-mode
  (lambda ()
    (if (and
         (not (string-match \"^\\*.*\\*$\" (buffer-name)))
         (not (eq major-mode 'dired-mode)))
        (fci-mode 1))))
(global-fci-mode 1)


(defvar-local company-fci-mode-on-p nil)

(defun company-turn-off-fci (&rest ignore)
  (when (boundp 'fci-mode)
    (setq company-fci-mode-on-p fci-mode)
    (when fci-mode (fci-mode -1))))

(defun company-maybe-turn-on-fci (&rest ignore)
  (when company-fci-mode-on-p (fci-mode 1)))

(add-hook 'company-completion-started-hook 'company-turn-off-fci)
(add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
(add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci)


(savehist-mode 1)
(add-to-list 'savehist-additional-variables 'kill-ring)

;; hideshow - code folding

(defun toggle-selective-display (column)
      (interactive \"P\")
      (set-selective-display
       (or column
           (unless selective-display
             (1+ (current-column))))))

(defun toggle-hiding (column)
      (interactive \"P\")
      (if hs-minor-mode
          (if (condition-case nil
                  (hs-toggle-hiding)
                (error t))
              (hs-show-all))
        (toggle-selective-display column)))

(load-library \"hideshow\")
(global-set-key (kbd \"C-+\") 'toggle-hiding)
(global-set-key (kbd \"C-\\\\\") 'toggle-selective-display)


(add-hook 'clojure-mode-hook 'hs-minor-mode)

" 0 11 (face font-lock-function-name-face fontified t) 11 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t) 14 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (face (rainbow-delimiters-depth-4-face) fontified t) 24 89 (fontified t) 89 90 (face (rainbow-delimiters-depth-4-face) fontified t) 90 91 (face (rainbow-delimiters-depth-3-face) fontified t) 91 96 (fontified t) 96 97 (face (rainbow-delimiters-depth-3-face) fontified t) 97 120 (fontified t) 120 121 (face (rainbow-delimiters-depth-3-face) fontified t) 121 122 (face (rainbow-delimiters-depth-2-face) fontified t) 122 123 (face (rainbow-delimiters-depth-1-face) fontified t) 123 125 (fontified t) 125 126 (face (rainbow-delimiters-depth-1-face) fontified t) 126 162 (fontified t) 162 163 (face (rainbow-delimiters-depth-1-face) fontified t) 163 164 (fontified t) 164 165 (face (rainbow-delimiters-depth-1-face) fontified t) 165 192 (fontified t) 192 193 (face (rainbow-delimiters-depth-1-face) fontified t) 193 196 (fontified t) 196 197 (face (rainbow-delimiters-depth-1-face) fontified t) 197 204 (face font-lock-keyword-face fontified t) 204 206 (fontified t) 206 222 (face font-lock-constant-face fontified t) 222 223 (face (rainbow-delimiters-depth-1-face) fontified t) 223 224 (fontified t) 224 225 (face (rainbow-delimiters-depth-1-face) fontified t) 225 240 (fontified t) 240 241 (face (rainbow-delimiters-depth-2-face) fontified t) 241 242 (face (rainbow-delimiters-depth-3-face) fontified t) 242 252 (fontified t) 252 253 (face (rainbow-delimiters-depth-3-face) fontified t) 253 254 (face (rainbow-delimiters-depth-2-face) fontified t) 254 272 (fontified t) 272 273 (face (rainbow-delimiters-depth-1-face) fontified t) 273 274 (fontified t) 274 275 (face (rainbow-delimiters-depth-1-face) fontified t) 275 290 (fontified t) 290 291 (face (rainbow-delimiters-depth-2-face) fontified t) 291 293 (fontified t) 293 294 (face (rainbow-delimiters-depth-2-face) fontified t) 294 317 (fontified t) 317 318 (face (rainbow-delimiters-depth-1-face) fontified t) 318 319 (fontified t) 319 320 (face (rainbow-delimiters-depth-1-face) fontified t) 320 335 (fontified t) 335 336 (face (rainbow-delimiters-depth-2-face) fontified t) 336 337 (face (rainbow-delimiters-depth-3-face) fontified t) 337 345 (fontified t) 345 346 (face (rainbow-delimiters-depth-3-face) fontified t) 346 347 (face (rainbow-delimiters-depth-2-face) fontified t) 347 370 (fontified t) 370 371 (face (rainbow-delimiters-depth-1-face) fontified t) 371 372 (fontified t) 372 373 (face (rainbow-delimiters-depth-1-face) fontified t) 373 388 (fontified t) 388 389 (face (rainbow-delimiters-depth-2-face) fontified t) 389 390 (face (rainbow-delimiters-depth-3-face) fontified t) 390 403 (fontified t) 403 404 (face (rainbow-delimiters-depth-3-face) fontified t) 404 405 (face (rainbow-delimiters-depth-2-face) fontified t) 405 437 (fontified t) 437 438 (face (rainbow-delimiters-depth-1-face) fontified t) 438 442 (fontified t) 442 445 (face font-lock-comment-delimiter-face fontified t) 445 505 (face font-lock-comment-face fontified t) 505 510 (face font-lock-comment-delimiter-face fontified t) 510 543 (face font-lock-comment-face fontified t) 543 544 (face (rainbow-delimiters-depth-1-face) fontified t) 544 549 (face font-lock-keyword-face fontified t) 549 550 (fontified t) 550 576 (face font-lock-function-name-face fontified t) 576 577 (fontified t) 577 578 (face (rainbow-delimiters-depth-2-face) fontified t) 578 579 (face (rainbow-delimiters-depth-2-face) fontified t) 579 582 (fontified t) 582 583 (face (rainbow-delimiters-depth-2-face) fontified t) 583 590 (face font-lock-keyword-face fontified t) 590 592 (fontified t) 592 597 (face font-lock-constant-face fontified t) 597 598 (face (rainbow-delimiters-depth-2-face) fontified t) 598 601 (fontified t) 601 602 (face (rainbow-delimiters-depth-2-face) fontified t) 602 633 (fontified t) 633 634 (face (rainbow-delimiters-depth-2-face) fontified t) 634 635 (face (rainbow-delimiters-depth-1-face) fontified t) 635 636 (fontified t) 636 637 (face (rainbow-delimiters-depth-1-face) fontified t) 637 675 (fontified t) 675 676 (face (rainbow-delimiters-depth-2-face) fontified t) 676 682 (face font-lock-keyword-face fontified t) 682 683 (fontified t) 683 684 (face (rainbow-delimiters-depth-3-face) fontified t) 684 685 (face (rainbow-delimiters-depth-3-face) fontified t) 685 686 (fontified t) 686 700 (fontified t) 700 701 (face (rainbow-delimiters-depth-3-face) fontified t) 701 727 (fontified t) 727 728 (face (rainbow-delimiters-depth-3-face) fontified t) 728 729 (face (rainbow-delimiters-depth-2-face) fontified t) 729 730 (face (rainbow-delimiters-depth-1-face) fontified t) 730 731 (fontified t) 731 732 (fontified t) 732 733 (fontified t) 733 736 (face font-lock-comment-delimiter-face fontified t) 736 776 (face font-lock-comment-face fontified t) 776 777 (face (rainbow-delimiters-depth-1-face) fontified t) 777 788 (face font-lock-keyword-face fontified t) 788 789 (fontified t) 789 799 (face font-lock-constant-face fontified t) 799 800 (fontified t) 800 802 (fontified t) 802 809 (face font-lock-builtin-face fontified t) 809 816 (fontified t) 816 824 (face font-lock-builtin-face fontified t) 824 827 (fontified t) 827 828 (face (rainbow-delimiters-depth-2-face) fontified t) 828 833 (face font-lock-keyword-face fontified t) 833 834 (fontified t) 834 863 (face font-lock-function-name-face fontified t) 863 864 (fontified t) 864 865 (face (rainbow-delimiters-depth-3-face) fontified t) 865 866 (face (rainbow-delimiters-depth-3-face) fontified t) 866 867 (fontified t) 867 871 (fontified t) 871 872 (face (rainbow-delimiters-depth-3-face) fontified t) 872 918 (fontified t) 918 919 (face (rainbow-delimiters-depth-3-face) fontified t) 919 920 (fontified t) 920 924 (fontified t) 924 925 (face (rainbow-delimiters-depth-3-face) fontified t) 925 944 (fontified t) 944 945 (face (rainbow-delimiters-depth-3-face) fontified t) 945 946 (face (rainbow-delimiters-depth-2-face) fontified t) 946 949 (fontified t) 949 956 (face font-lock-builtin-face fontified t) 956 957 (fontified t) 957 959 (fontified t) 959 960 (face (rainbow-delimiters-depth-2-face) fontified t) 960 1001 (fontified t) 1001 1008 (face font-lock-builtin-face fontified t) 1008 1040 (fontified t) 1040 1041 (face (rainbow-delimiters-depth-2-face) fontified t) 1041 1042 (face (rainbow-delimiters-depth-1-face) fontified t) 1042 1043 (fontified t) 1043 1044 (fontified t) 1044 1045 (face (rainbow-delimiters-depth-1-face) fontified t) 1045 1091 (fontified t) 1091 1092 (face (rainbow-delimiters-depth-1-face) fontified t) 1092 1093 (fontified t) 1093 1094 (face (rainbow-delimiters-depth-1-face) fontified t) 1094 1113 (fontified t) 1113 1114 (face (rainbow-delimiters-depth-1-face) fontified t) 1114 1115 (fontified t) 1115 1116 (face (rainbow-delimiters-depth-1-face) fontified t) 1116 1135 (fontified t) 1135 1136 (face (rainbow-delimiters-depth-2-face) fontified t) 1136 1156 (face font-lock-string-face fontified t) 1156 1157 (face (rainbow-delimiters-depth-2-face) fontified t) 1157 1158 (face (rainbow-delimiters-depth-1-face) fontified t) 1158 1159 (fontified t) 1159 1160 (face (rainbow-delimiters-depth-1-face) fontified t) 1160 1181 (fontified t) 1181 1201 (face font-lock-string-face fontified t) 1201 1202 (face (rainbow-delimiters-depth-1-face) fontified t) 1202 1203 (fontified t) 1203 1204 (face (rainbow-delimiters-depth-1-face) fontified t) 1204 1232 (fontified t) 1232 1247 (face font-lock-string-face fontified t) 1247 1248 (face (rainbow-delimiters-depth-1-face) fontified t) 1248 1249 (fontified t) 1249 1251 (face font-lock-comment-delimiter-face fontified t) 1251 1267 (face font-lock-comment-face fontified t) 1267 1268 (fontified t) 1268 1271 (face font-lock-comment-delimiter-face fontified t) 1271 1281 (face font-lock-comment-face fontified t) 1281 1282 (fontified t) 1282 1283 (face (rainbow-delimiters-depth-1-face) fontified t) 1283 1310 (fontified t) 1310 1311 (face (rainbow-delimiters-depth-1-face) fontified t) 1311 1312 (fontified t) 1312 1313 (fontified t) 1313 1314 (face (rainbow-delimiters-depth-1-face) fontified t) 1314 1321 (face font-lock-keyword-face fontified t) 1321 1323 (fontified t) 1323 1344 (face font-lock-constant-face fontified t) 1344 1345 (face (rainbow-delimiters-depth-1-face) fontified t) 1345 1346 (fontified t) 1346 1347 (fontified t) 1347 1348 (face (rainbow-delimiters-depth-1-face) fontified t) 1348 1376 (face font-lock-keyword-face fontified t) 1376 1377 (fontified t) 1377 1392 (face font-lock-function-name-face fontified t) 1392 1404 (fontified t) 1404 1405 (face (rainbow-delimiters-depth-2-face) fontified t) 1405 1411 (face font-lock-keyword-face fontified t) 1411 1412 (fontified t) 1412 1413 (face (rainbow-delimiters-depth-3-face) fontified t) 1413 1414 (face (rainbow-delimiters-depth-3-face) fontified t) 1414 1419 (fontified t) 1419 1420 (face (rainbow-delimiters-depth-3-face) fontified t) 1420 1422 (face font-lock-keyword-face fontified t) 1422 1423 (fontified t) 1423 1424 (face (rainbow-delimiters-depth-4-face) fontified t) 1424 1428 (fontified t) 1428 1437 (fontified t) 1437 1438 (face (rainbow-delimiters-depth-5-face) fontified t) 1438 1442 (fontified t) 1442 1443 (face (rainbow-delimiters-depth-6-face) fontified t) 1443 1456 (fontified t) 1456 1466 (face font-lock-string-face fontified t) 1466 1467 (fontified t) 1467 1468 (face (rainbow-delimiters-depth-7-face) fontified t) 1468 1479 (fontified t) 1479 1480 (face (rainbow-delimiters-depth-7-face) fontified t) 1480 1481 (face (rainbow-delimiters-depth-6-face) fontified t) 1481 1482 (face (rainbow-delimiters-depth-5-face) fontified t) 1482 1483 (fontified t) 1483 1492 (fontified t) 1492 1493 (face (rainbow-delimiters-depth-5-face) fontified t) 1493 1497 (fontified t) 1497 1498 (face (rainbow-delimiters-depth-6-face) fontified t) 1498 1523 (fontified t) 1523 1524 (face (rainbow-delimiters-depth-6-face) fontified t) 1524 1525 (face (rainbow-delimiters-depth-5-face) fontified t) 1525 1526 (face (rainbow-delimiters-depth-4-face) fontified t) 1526 1535 (fontified t) 1535 1536 (face (rainbow-delimiters-depth-4-face) fontified t) 1536 1546 (fontified t) 1546 1547 (face (rainbow-delimiters-depth-4-face) fontified t) 1547 1548 (face (rainbow-delimiters-depth-3-face) fontified t) 1548 1549 (face (rainbow-delimiters-depth-2-face) fontified t) 1549 1550 (face (rainbow-delimiters-depth-1-face) fontified t) 1550 1551 (fontified t) 1551 1552 (face (rainbow-delimiters-depth-1-face) fontified t) 1552 1569 (fontified t) 1569 1570 (face (rainbow-delimiters-depth-1-face) fontified t) 1570 1571 (fontified t) 1571 1572 (fontified t) 1572 1573 (fontified t) 1573 1574 (face (rainbow-delimiters-depth-1-face) fontified t) 1574 1586 (face font-lock-keyword-face fontified t) 1586 1587 (fontified t) 1587 1608 (face font-lock-variable-name-face fontified t) 1608 1612 (fontified t) 1612 1613 (face (rainbow-delimiters-depth-1-face) fontified t) 1613 1614 (fontified t) 1614 1615 (fontified t) 1615 1616 (face (rainbow-delimiters-depth-1-face) fontified t) 1616 1621 (face font-lock-keyword-face fontified t) 1621 1622 (fontified t) 1622 1642 (face font-lock-function-name-face fontified t) 1642 1643 (fontified t) 1643 1644 (face (rainbow-delimiters-depth-2-face) fontified t) 1644 1649 (face font-lock-type-face fontified t) 1649 1656 (fontified t) 1656 1657 (face (rainbow-delimiters-depth-2-face) fontified t) 1657 1658 (fontified t) 1658 1660 (fontified t) 1660 1661 (face (rainbow-delimiters-depth-2-face) fontified t) 1661 1665 (face font-lock-keyword-face fontified t) 1665 1666 (fontified t) 1666 1667 (face (rainbow-delimiters-depth-3-face) fontified t) 1667 1683 (fontified t) 1683 1684 (face (rainbow-delimiters-depth-3-face) fontified t) 1684 1685 (fontified t) 1685 1689 (fontified t) 1689 1690 (face (rainbow-delimiters-depth-3-face) fontified t) 1690 1725 (fontified t) 1725 1726 (face (rainbow-delimiters-depth-3-face) fontified t) 1726 1727 (fontified t) 1727 1731 (fontified t) 1731 1732 (face (rainbow-delimiters-depth-3-face) fontified t) 1732 1736 (face font-lock-keyword-face fontified t) 1736 1746 (fontified t) 1746 1747 (face (rainbow-delimiters-depth-4-face) fontified t) 1747 1758 (fontified t) 1758 1759 (face (rainbow-delimiters-depth-4-face) fontified t) 1759 1760 (face (rainbow-delimiters-depth-3-face) fontified t) 1760 1761 (face (rainbow-delimiters-depth-2-face) fontified t) 1761 1762 (face (rainbow-delimiters-depth-1-face) fontified t) 1762 1763 (fontified t) 1763 1764 (fontified t) 1764 1765 (face (rainbow-delimiters-depth-1-face) fontified t) 1765 1770 (face font-lock-keyword-face fontified t) 1770 1771 (fontified t) 1771 1796 (face font-lock-function-name-face fontified t) 1796 1797 (fontified t) 1797 1798 (face (rainbow-delimiters-depth-2-face) fontified t) 1798 1803 (face font-lock-type-face fontified t) 1803 1810 (fontified t) 1810 1811 (face (rainbow-delimiters-depth-2-face) fontified t) 1811 1814 (fontified t) 1814 1815 (face (rainbow-delimiters-depth-2-face) fontified t) 1815 1819 (face font-lock-keyword-face fontified t) 1819 1842 (fontified t) 1842 1843 (face (rainbow-delimiters-depth-3-face) fontified t) 1843 1853 (fontified t) 1853 1854 (face (rainbow-delimiters-depth-3-face) fontified t) 1854 1855 (face (rainbow-delimiters-depth-2-face) fontified t) 1855 1856 (face (rainbow-delimiters-depth-1-face) fontified t) 1856 1857 (fontified t) 1857 1858 (fontified t) 1858 1859 (face (rainbow-delimiters-depth-1-face) fontified t) 1859 1922 (fontified t) 1922 1923 (face (rainbow-delimiters-depth-1-face) fontified t) 1923 1924 (fontified t) 1924 1925 (face (rainbow-delimiters-depth-1-face) fontified t) 1925 1994 (fontified t) 1994 1995 (face (rainbow-delimiters-depth-1-face) fontified t) 1995 1996 (fontified t) 1996 1997 (face (rainbow-delimiters-depth-1-face) fontified t) 1997 2067 (fontified t) 2067 2068 (face (rainbow-delimiters-depth-1-face) fontified t) 2068 2069 (fontified t) 2069 2071 (fontified t) 2071 2072 (face (rainbow-delimiters-depth-1-face) fontified t) 2072 2087 (fontified t) 2087 2088 (face (rainbow-delimiters-depth-1-face) fontified t) 2088 2089 (fontified t) 2089 2090 (face (rainbow-delimiters-depth-1-face) fontified t) 2090 2143 (fontified t) 2143 2144 (face (rainbow-delimiters-depth-1-face) fontified t) 2144 2146 (fontified t) 2146 2149 (face font-lock-comment-delimiter-face fontified t) 2149 2173 (face font-lock-comment-face fontified t) 2173 2174 (fontified t) 2174 2175 (face (rainbow-delimiters-depth-1-face) fontified t) 2175 2180 (face font-lock-keyword-face fontified t) 2180 2181 (fontified t) 2181 2205 (face font-lock-function-name-face fontified t) 2205 2206 (fontified t) 2206 2207 (face (rainbow-delimiters-depth-2-face) fontified t) 2207 2213 (fontified t) 2213 2214 (face (rainbow-delimiters-depth-2-face) fontified t) 2214 2221 (fontified t) 2221 2222 (face (rainbow-delimiters-depth-2-face) fontified t) 2222 2234 (fontified t) 2234 2237 (face font-lock-string-face fontified t) 2237 2238 (face (rainbow-delimiters-depth-2-face) fontified t) 2238 2245 (fontified t) 2245 2246 (face (rainbow-delimiters-depth-2-face) fontified t) 2246 2275 (fontified t) 2275 2276 (face (rainbow-delimiters-depth-3-face) fontified t) 2276 2297 (fontified t) 2297 2298 (face (rainbow-delimiters-depth-4-face) fontified t) 2298 2304 (face font-lock-keyword-face fontified t) 2304 2336 (fontified t) 2336 2337 (face (rainbow-delimiters-depth-5-face) fontified t) 2337 2340 (fontified t) 2340 2341 (face (rainbow-delimiters-depth-6-face) fontified t) 2341 2355 (fontified t) 2355 2356 (face (rainbow-delimiters-depth-6-face) fontified t) 2356 2357 (face (rainbow-delimiters-depth-5-face) fontified t) 2357 2358 (face (rainbow-delimiters-depth-4-face) fontified t) 2358 2359 (face (rainbow-delimiters-depth-3-face) fontified t) 2359 2360 (face (rainbow-delimiters-depth-2-face) fontified t) 2360 2361 (face (rainbow-delimiters-depth-1-face) fontified t) 2361 2363 (fontified t) 2363 2364 (face (rainbow-delimiters-depth-1-face) fontified t) 2364 2369 (face font-lock-keyword-face fontified t) 2369 2370 (fontified t) 2370 2383 (face font-lock-function-name-face fontified t) 2383 2384 (fontified t) 2384 2385 (face (rainbow-delimiters-depth-2-face) fontified t) 2385 2391 (fontified t) 2391 2392 (face (rainbow-delimiters-depth-2-face) fontified t) 2392 2399 (fontified t) 2399 2400 (face (rainbow-delimiters-depth-2-face) fontified t) 2400 2412 (fontified t) 2412 2415 (face font-lock-string-face fontified t) 2415 2416 (face (rainbow-delimiters-depth-2-face) fontified t) 2416 2423 (fontified t) 2423 2424 (face (rainbow-delimiters-depth-2-face) fontified t) 2424 2426 (face font-lock-keyword-face fontified t) 2426 2451 (fontified t) 2451 2452 (face (rainbow-delimiters-depth-3-face) fontified t) 2452 2454 (face font-lock-keyword-face fontified t) 2454 2455 (fontified t) 2455 2456 (face (rainbow-delimiters-depth-4-face) fontified t) 2456 2470 (face font-lock-keyword-face fontified t) 2470 2493 (fontified t) 2493 2494 (face (rainbow-delimiters-depth-5-face) fontified t) 2494 2510 (fontified t) 2510 2511 (face (rainbow-delimiters-depth-5-face) fontified t) 2511 2528 (fontified t) 2528 2529 (face (rainbow-delimiters-depth-5-face) fontified t) 2529 2534 (face font-lock-warning-face fontified t) 2534 2536 (fontified t) 2536 2537 (face (rainbow-delimiters-depth-5-face) fontified t) 2537 2538 (face (rainbow-delimiters-depth-4-face) fontified t) 2538 2553 (fontified t) 2553 2554 (face (rainbow-delimiters-depth-4-face) fontified t) 2554 2565 (fontified t) 2565 2566 (face (rainbow-delimiters-depth-4-face) fontified t) 2566 2567 (face (rainbow-delimiters-depth-3-face) fontified t) 2567 2576 (fontified t) 2576 2577 (face (rainbow-delimiters-depth-3-face) fontified t) 2577 2608 (fontified t) 2608 2609 (face (rainbow-delimiters-depth-3-face) fontified t) 2609 2610 (face (rainbow-delimiters-depth-2-face) fontified t) 2610 2611 (face (rainbow-delimiters-depth-1-face) fontified t) 2611 2612 (fontified t) 2612 2613 (fontified t) 2613 2614 (face (rainbow-delimiters-depth-1-face) fontified t) 2614 2627 (fontified t) 2627 2637 (face font-lock-string-face fontified t) 2637 2638 (face (rainbow-delimiters-depth-1-face) fontified t) 2638 2639 (fontified t) 2639 2640 (face (rainbow-delimiters-depth-1-face) fontified t) 2640 2655 (fontified t) 2655 2656 (face (rainbow-delimiters-depth-2-face) fontified t) 2656 2660 (fontified t) 2660 2665 (face font-lock-string-face fontified t) 2665 2666 (face (rainbow-delimiters-depth-2-face) fontified t) 2666 2681 (fontified t) 2681 2682 (face (rainbow-delimiters-depth-1-face) fontified t) 2682 2683 (fontified t) 2683 2684 (face (rainbow-delimiters-depth-1-face) fontified t) 2684 2699 (fontified t) 2699 2700 (face (rainbow-delimiters-depth-2-face) fontified t) 2700 2704 (fontified t) 2704 2710 (face font-lock-string-face fontified t) 2710 2711 (face (rainbow-delimiters-depth-2-face) fontified t) 2711 2737 (fontified t) 2737 2738 (face (rainbow-delimiters-depth-1-face) fontified t) 2738 2741 (fontified t) 2741 2742 (face (rainbow-delimiters-depth-1-face) fontified t) 2742 2784 (fontified t) 2784 2785 (face (rainbow-delimiters-depth-1-face) fontified t) 2785 2787 (fontified t))))
