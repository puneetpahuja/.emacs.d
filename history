;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(extended-command-history heroku-command-hist heroku-app-hist read-expression-history magit-revision-history cider-minibuffer-history search-ring buffer-name-history ido-buffer-history face-name-history helm-M-x-input-history minibuffer-history helm-occur-history))
(setq extended-command-history '("eval-buffer" "paredit-mode" "term" "ansi-term" "shell" "haskell-navigate-imports"))
(setq heroku-command-hist '("bash"))
(setq heroku-app-hist '("bestplan"))
(setq read-expression-history '("(setq line-spacing -1.0)" "(setq line-spacing 0.5)"))
(setq magit-revision-history '("origin/master" "dev" "master" "dev" "master" "dev" "master" "master" "dev" "master" "dev" "master" "dev" "master" "dev" "master" "dev" "master" "dev" "master" "dev" "master" "dev" "master"))
(setq cider-minibuffer-history '("process-csv-row" "get-recharges" "fs/get-talktime-recharges" "core/get-best-recharges" "get-recharges" "get-output-html" "show-plans" "fs/get-talktime-recharges" "core/get-best-recharges" "get-recharges" "core/get-best-recharges" "best-plan.core" "string/join" "fs/get-talktime-recharges" "core/get-best-recharges" "get-recharges" "best-plan.server/get-output-html" "best-plan.server/show-plans" "best-plan.api-datayuge" "stringify-nil" "doseq" "do-seq" "save-json/read-json-file" "make-parents"))
(setq search-ring '("delete" "combina"))
(setq buffer-name-history '("*terminal*" "*ansi-term*" "*terminal*" "*shell*" "*grep*" "*magit: best_plan" "*heroku bash: bestplan*" "powerline-themes.el" "server.clj" "test.clj" "*Customize Face: Default*" "init.el" "*magit: .emacs.d" "*Customize Face: Default*" "isd.csv" "csv_gen.clj" "csv_gen.clj"))
(setq ido-buffer-history '("*terminal*" "*ansi-term*" "*terminal*" "*shell*" "*grep*" "*magit: best_plan" "*heroku bash: bestplan*" "powerline-themes.el" "server.clj" "test.clj" "*Customize Face: Default*" "init.el" "*magit: .emacs.d" "*Customize Face: Default*" "isd.csv" "*Custom Themes*"))
(setq face-name-history '("default" "all faces" "default" "all faces" "default"))
(setq helm-M-x-input-history '(#("hs-toggle-hiding" 0 16 (fontified t)) #("pfdin" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face)) "eval-bu" "she" "ba" "parede" "term" "ansi" "shell" "term-send-c" "term" "hasmodesty" "hasnav" "eva" "pacins" "pro-gre" "pac-in" "packarefcon" #("130" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) #("120" 0 3 (fontified t)) "eval-bu" "ci" "cideresta" #("2" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) #("get-recharges" 0 13 (face font-lock-function-name-face cider-locals ("recharge-type" "circle" "telecom-provider" "drop-cols" "file" "drop-cols" "init-fn" "type" "user") fontified t help-echo cider--help-echo)) #("get-csv-rows" 0 12 (face font-lock-function-name-face cider-locals ("recharge-type" "circle" "telecom-provider" "drop-cols" "file") fontified t help-echo cider--help-echo)) #("process-csv-row" 0 15 (face font-lock-function-name-face cider-locals ("recharge-type" "circle" "telecom-provider" "drop-cols" "csv-row") help-echo cider--help-echo fontified t)) "progre" "proje-gre" #("env/column-names" 0 3 (face font-lock-type-face cider-locals ("is-first?" "csv-file" "columns" "json-file" "csv-rows" "header-row" "plans") help-echo cider--help-echo fontified t) 3 4 (face default cider-locals ("is-first?" "csv-file" "columns" "json-file" "csv-rows" "header-row" "plans") help-echo cider--help-echo fontified t) 4 16 (cider-locals ("is-first?" "csv-file" "columns" "json-file" "csv-rows" "header-row" "plans") help-echo cider--help-echo fontified t)) #("best-plan.server> " 0 18 (rear-nonsticky (field read-only font-lock-face intangible) field cider-repl-prompt intangible t read-only t font-lock-face cider-repl-prompt-face fontified t)) "proj-gre" "projectile-" "heroku" "packa" #("pfdin" 0 5 (face font-lock-string-face fontified t)) "eval-bu" "indent-bu" "eval-bu" #("and" 0 3 (fontified t)) #("list" 0 4 (fontified t)) "eval-bu" #("hideshow" 0 8 (fontified t face font-lock-string-face)) "eva" "res" "clear-bu" "set-face" "cider-res" #("130" 0 3 (fontified t)) #("120" 0 3 (fontified t)) #("they" 0 4 (fontified t face font-lock-comment-face)) #("one" 0 3 (fontified t face font-lock-comment-face)) "eval-bu" #("pfdin" 0 5 (fontified t face font-lock-string-face)) #("light" 0 5 (fontified t)) #("pfdin" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face)) #("consolas" 0 8 (fontified t face font-lock-string-face)) #("130" 0 3 (fontified t)) #("pfdin" 0 5 (fontified t face font-lock-string-face)) #("120" 0 3 (fontified t)) #("iosevka" 0 7 (fontified t face font-lock-string-face)) #("sc" 0 2 (fontified t face font-lock-string-face)) #("j" 0 1 (fontified t face font-lock-string-face)) #("cl" 0 2 (fontified t face font-lock-string-face)) #("iosevka" 0 7 (fontified t face font-lock-string-face)) #("tc" 0 2 (fontified t face font-lock-string-face)) #("sc" 0 2 (fontified t face font-lock-string-face)) #("j" 0 1 (fontified t face font-lock-string-face)) #("cl" 0 2 (fontified t face font-lock-string-face)) #("type" 0 4 (fontified t face font-lock-string-face)) #("term" 0 4 (fontified t face font-lock-string-face)) #("iosevka" 0 7 (fontified t face font-lock-string-face)) #("slab" 0 4 (fontified t face font-lock-string-face)) #("iosevkacc" 0 9 (fontified t face font-lock-string-face)) #("regular" 0 7 (fontified t)) #("light" 0 5 (fontified t face font-lock-string-face)) #("11" 0 2 (fontified t face font-lock-string-face)) #("12" 0 2 (fontified t face font-lock-string-face)) #("iosevka" 0 7 (fontified t face font-lock-string-face)) "evabu" "apropos" "comment-re" #("consolas" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t)) #("pragmatapro" 0 11 (face font-lock-string-face fontified t)) #("consolas" 0 8 (face font-lock-string-face fontified t)) "eval-bu" "eval-" "eva" "auto-fill-" "auto-fi" "visual-" #("consolas" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t)) #("bold" 0 4 (fontified t)) #("110" 0 3 (fontified t)) #("120" 0 3 (fontified t)) "eval-bu" #("camingocode" 0 11 (face font-lock-string-face fontified t)) #("130" 0 3 (fontified t)) #("apercu" 0 6 (fontified t face font-lock-string-face)) #("130" 0 3 (fontified t))))
(setq minibuffer-history '("po" "ini" "powe" "ini" "the" "ini" "3" "99" "proce" "3" "/home/puneet/code/geekskool/haskell_first_principles/ch2" "ch" "ini" "ch" "/home/puneet/code/geekskool/haskell_first_principles/" "ch" "/bin/sh" "/bin/bash" "/home/puneet/code/geekskool/haskell_first_principles/ch2.hs" "/home/puneet/code/geekskool/haskell_first_principles/" #("could" 0 5 (face font-lock-comment-face fontified t)) "ch" "ini" "/home/puneet/.emacs.d/" "ini" #("triple" 0 6 (fontified t face haskell-definition-face)) #("hindent-mode" 0 12 (fontified t)) "hinden" "newline-and" #("triple" 0 6 (fontified t face haskell-definition-face)) "ch" "ini" "/home/puneet/code/geekskool/haskell_first_principles/ch" "ini" "ser" "repl" "inpu" "serve" #("best-plan.convert-csv> " 0 23 (rear-nonsticky (field read-only font-lock-face intangible) field cider-repl-prompt intangible t read-only t font-lock-face cider-repl-prompt-face fontified t)) "con" "repl" "en" "serv" "gre" "1)" "1" "2" "env" "repl" "get-recharges" "get-csv-rows" "process-csv-row" "fs" "write-csv" "con" "uti" "conve" "core" "scr" "fs" "gre" "repl" "fn" "ini" "string" "lambda" "ini" "con" "scr" "all" "repl" #("best-plan.server> " 0 18 (rear-nonsticky (field read-only font-lock-face intangible) field cider-repl-prompt intangible t read-only t font-lock-face cider-repl-prompt-face fontified t)) "repl" "env" "uti" "write-csv" "best-plan.server> write-csv" "repl" "create-csv" #("best-plan.server> " 0 18 (rear-nonsticky (field read-only font-lock-face intangible) field cider-repl-prompt intangible t read-only t font-lock-face cider-repl-prompt-face fontified t)) #("selected/" 0 8 (face font-lock-doc-face cider-locals nil help-echo cider--help-echo fontified t) 8 9 (face font-lock-doc-face cider-locals nil help-echo cider--help-echo fontified t)) "env" "uti" "/home/puneet/code/geekskool/best_plan/resources/public/" "inpu" #("/bin/" 0 5 (fontified t)) "b" "hero" "ser" "inp" "/home/puneet/a" "/home/puneet/.emacs.d/vendor/emacs-powerline/" #("start" 0 5 (fontified t)) "/home/puneet/a" "/home/puneet/a.a" "/home/puneet/a" "scra" "/home/puneet/.emacs.d/vendor/emacs-powerline/" ".el" "inpu"))
(setq helm-occur-history '("D99" ";" "pfdi" "'packa" "has" "write" "24425" #("t24431:" 0 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) "get-out" "get-retur" "program" "80" #("t25811:" 0 7 (rear-nonsticky (font-lock-face) font-lock-face cider-repl-stdout-face fontified t)) "face" "format" #("t24406:" 0 5 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face)) 5 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) #("t26331:" 0 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) #("t25935:" 0 7 (fontified t font-lock-face cider-repl-stdout-face rear-nonsticky (font-lock-face))) "faces" "consol" "faces" "conso"))
(setq kill-ring '("       (rhs (list ;(powerline-raw '(10 \"%i\"))
                   (powerline-raw global-mode-string mode-line 'r)
                   (powerline-raw \"[%l,\" mode-line 'l)
                   (powerline-raw (format-mode-line '(3 \"%c] \")))
                   (powerline-raw (replace-regexp-in-string  \"%\" \"%%\" (format-mode-line '(-3 \"%p\"))) mode-line 'r)
                   (powerline-raw \" \" mode-line 'l)
                   (powerline-major-mode mode-line)
                   (powerline-process mode-line)" #("(rhs (list ;(powerline-raw '(10 \"%i\"))
                                (powerline-raw global-mode-string mode-line 'r)
                                (powerline-raw \"[%l,\" mode-line 'l)
                                ;; (powerline-raw \"[%c,\" mode-line 'l)
                                (powerline-raw (format-mode-line '(3 \"%c\")))
                                (powerline-raw (replace-regexp-in-string  \"%\" \"%%\" (format-mode-line '(-3 \"%p\"))) mode-line 'r)
                                (powerline-raw \" \" mode-line 'l)
                                (powerline-major-mode mode-line)
                                (powerline-process mode-line)" 0 1 (fontified t face (rainbow-delimiters-depth-7-face)) 1 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-8-face)) 6 11 (fontified t) 11 12 (fontified t face font-lock-comment-delimiter-face) 12 39 (fontified t face font-lock-comment-face) 39 71 (fontified t) 71 72 (fontified t face (rainbow-delimiters-depth-9-face)) 72 117 (fontified t) 117 118 (fontified t face (rainbow-delimiters-depth-9-face)) 118 119 (fontified t) 119 151 (fontified t) 151 152 (fontified t face (rainbow-delimiters-depth-9-face)) 152 166 (fontified t) 166 172 (fontified t face font-lock-string-face) 172 185 (fontified t) 185 186 (fontified t face (rainbow-delimiters-depth-9-face)) 186 219 (fontified t) 219 222 (fontified t face font-lock-comment-delimiter-face) 222 258 (fontified t face font-lock-comment-face) 258 290 (fontified t) 290 291 (fontified t face (rainbow-delimiters-depth-9-face)) 291 305 (fontified t) 305 306 (fontified t face (rainbow-delimiters-depth-1-face)) 306 324 (fontified t) 324 325 (fontified t face (rainbow-delimiters-depth-2-face)) 325 327 (fontified t) 327 331 (fontified t face font-lock-string-face) 331 332 (fontified t face (rainbow-delimiters-depth-2-face)) 332 333 (fontified t face (rainbow-delimiters-depth-1-face)) 333 334 (fontified t face (rainbow-delimiters-depth-9-face)) 334 367 (fontified t) 367 368 (fontified t face (rainbow-delimiters-depth-9-face)) 368 382 (fontified t) 382 383 (fontified t face (rainbow-delimiters-depth-1-face)) 383 409 (fontified t) 409 412 (fontified t face font-lock-string-face) 412 413 (fontified t) 413 417 (fontified t face font-lock-string-face) 417 418 (fontified t) 418 419 (fontified t face (rainbow-delimiters-depth-2-face)) 419 437 (fontified t) 437 438 (fontified t face (rainbow-delimiters-depth-3-face)) 438 441 (fontified t) 441 445 (fontified t face font-lock-string-face) 445 446 (fontified t face (rainbow-delimiters-depth-3-face)) 446 447 (fontified t face (rainbow-delimiters-depth-2-face)) 447 448 (fontified t face (rainbow-delimiters-depth-1-face)) 448 461 (fontified t) 461 462 (fontified t face (rainbow-delimiters-depth-9-face)) 462 495 (fontified t) 495 496 (fontified t face (rainbow-delimiters-depth-9-face)) 496 510 (fontified t) 510 513 (fontified t face font-lock-string-face) 513 526 (fontified t) 526 527 (fontified t face (rainbow-delimiters-depth-9-face)) 527 560 (fontified t) 560 561 (fontified t face (rainbow-delimiters-depth-9-face)) 561 591 (fontified t) 591 592 (fontified t face (rainbow-delimiters-depth-9-face)) 592 625 (fontified t) 625 626 (fontified t face (rainbow-delimiters-depth-9-face)) 626 653 (fontified t) 653 654 (fontified t face (rainbow-delimiters-depth-9-face))) #("
" 0 1 (fontified t)) #("(powerline-raw \"[%l,\" mode-line 'l)" 0 1 (face (rainbow-delimiters-depth-9-face) fontified t) 1 15 (fontified t) 15 20 (face font-lock-string-face fontified t) 20 21 (face font-lock-string-face fontified t) 21 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-9-face) fontified t)) #(" \" mode-line 'l)
                                (powerline-raw (format-mode-line '(3 \"%c] \")) 'l)
                                (powerline-raw (replace-regexp-in-string  \"%\" \"%%\" (format-mode-line '(-3 \"%p\"))) mode-line 'r)
                                (powerline-raw \" \" mode-line 'l)
                                (powerline-major-mode mode-line)
                                (powerline-process mode-line)
                                ;; (powerline-raw \" \" mode-line)
                                        ;(powerline-raw (concat \"[\" (mode-line-eol-desc) \"]\") mode-line)
                                (when (and (boundp 'which-func-mode) which-func-mode)
                                  (powerline-raw which-func-format nil 'l))
                                (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
                                  (powerline-raw erc-modified-channels-object face1 'l))
                                (powerline-raw \"[\" mode-line 'l)
                                (powerline-minor-modes mode-line)
                                (powerline-raw \"%n\" mode-line)
                                (powerline-raw \"]\" mode-line))))
                     (concat (powerline-render lhs)
                                        ;(powerline-fill mode-line (powerline-width rhs))
                             (powerline-render rhs))
                     )))))" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-9-face) fontified t) 16 17 (fontified t) 17 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-9-face) fontified t) 50 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-1-face) fontified t) 65 83 (fontified t) 83 84 (face (rainbow-delimiters-depth-2-face) fontified t) 84 86 (fontified t) 86 92 (face font-lock-string-face fontified t) 92 93 (face (rainbow-delimiters-depth-2-face) fontified t) 93 94 (face (rainbow-delimiters-depth-1-face) fontified t) 94 97 (fontified t) 97 98 (face (rainbow-delimiters-depth-9-face) fontified t) 98 99 (fontified t) 99 131 (fontified t) 131 132 (face (rainbow-delimiters-depth-9-face) fontified t) 132 146 (fontified t) 146 147 (face (rainbow-delimiters-depth-1-face) fontified t) 147 173 (fontified t) 173 176 (face font-lock-string-face fontified t) 176 177 (fontified t) 177 181 (face font-lock-string-face fontified t) 181 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-2-face) fontified t) 183 201 (fontified t) 201 202 (face (rainbow-delimiters-depth-3-face) fontified t) 202 205 (fontified t) 205 209 (face font-lock-string-face fontified t) 209 210 (face (rainbow-delimiters-depth-3-face) fontified t) 210 211 (face (rainbow-delimiters-depth-2-face) fontified t) 211 212 (face (rainbow-delimiters-depth-1-face) fontified t) 212 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-9-face) fontified t) 226 259 (fontified t) 259 260 (face (rainbow-delimiters-depth-9-face) fontified t) 260 274 (fontified t) 274 277 (face font-lock-string-face fontified t) 277 290 (fontified t) 290 291 (face (rainbow-delimiters-depth-9-face) fontified t) 291 324 (fontified t) 324 325 (face (rainbow-delimiters-depth-9-face) fontified t) 325 355 (fontified t) 355 356 (face (rainbow-delimiters-depth-9-face) fontified t) 356 389 (fontified t) 389 390 (face (rainbow-delimiters-depth-9-face) fontified t) 390 417 (fontified t) 417 418 (face (rainbow-delimiters-depth-9-face) fontified t) 418 451 (fontified t) 451 454 (face font-lock-comment-delimiter-face fontified t) 454 484 (face font-lock-comment-face fontified t) 484 524 (fontified t) 524 525 (face font-lock-comment-delimiter-face fontified t) 525 589 (face font-lock-comment-face fontified t) 589 621 (fontified t) 621 622 (face (rainbow-delimiters-depth-9-face) fontified t) 622 626 (face font-lock-keyword-face fontified t) 626 627 (fontified t) 627 628 (face (rainbow-delimiters-depth-1-face) fontified t) 628 632 (fontified t) 632 633 (face (rainbow-delimiters-depth-2-face) fontified t) 633 656 (fontified t) 656 657 (face (rainbow-delimiters-depth-2-face) fontified t) 657 673 (fontified t) 673 674 (face (rainbow-delimiters-depth-1-face) fontified t) 674 675 (fontified t) 675 709 (fontified t) 709 710 (face (rainbow-delimiters-depth-1-face) fontified t) 710 748 (fontified t) 748 749 (face (rainbow-delimiters-depth-1-face) fontified t) 749 750 (face (rainbow-delimiters-depth-9-face) fontified t) 750 783 (fontified t) 783 784 (face (rainbow-delimiters-depth-9-face) fontified t) 784 788 (face font-lock-keyword-face fontified t) 788 789 (fontified t) 789 790 (face (rainbow-delimiters-depth-1-face) fontified t) 790 794 (fontified t) 794 795 (face (rainbow-delimiters-depth-2-face) fontified t) 795 823 (fontified t) 823 824 (face (rainbow-delimiters-depth-2-face) fontified t) 824 845 (fontified t) 845 846 (face (rainbow-delimiters-depth-1-face) fontified t) 846 881 (fontified t) 881 882 (face (rainbow-delimiters-depth-1-face) fontified t) 882 933 (fontified t) 933 934 (face (rainbow-delimiters-depth-1-face) fontified t) 934 935 (face (rainbow-delimiters-depth-9-face) fontified t) 935 968 (fontified t) 968 969 (face (rainbow-delimiters-depth-9-face) fontified t) 969 983 (fontified t) 983 986 (face font-lock-string-face fontified t) 986 999 (fontified t) 999 1000 (face (rainbow-delimiters-depth-9-face) fontified t) 1000 1033 (fontified t) 1033 1034 (face (rainbow-delimiters-depth-9-face) fontified t) 1034 1065 (fontified t) 1065 1066 (face (rainbow-delimiters-depth-9-face) fontified t) 1066 1099 (fontified t) 1099 1100 (face (rainbow-delimiters-depth-9-face) fontified t) 1100 1114 (fontified t) 1114 1118 (face font-lock-string-face fontified t) 1118 1128 (fontified t) 1128 1129 (face (rainbow-delimiters-depth-9-face) fontified t) 1129 1162 (fontified t) 1162 1163 (face (rainbow-delimiters-depth-9-face) fontified t) 1163 1177 (fontified t) 1177 1180 (face font-lock-string-face fontified t) 1180 1190 (fontified t) 1190 1191 (face (rainbow-delimiters-depth-9-face) fontified t) 1191 1192 (face (rainbow-delimiters-depth-8-face) fontified t) 1192 1193 (face (rainbow-delimiters-depth-7-face) fontified t) 1193 1194 (face (rainbow-delimiters-depth-6-face) fontified t) 1194 1195 (fontified t) 1216 1217 (face (rainbow-delimiters-depth-6-face)) 1224 1225 (face (rainbow-delimiters-depth-7-face)) 1245 1246 (face (rainbow-delimiters-depth-7-face)) 1287 1288 (face font-lock-comment-delimiter-face) 1288 1337 (face font-lock-comment-face) 1366 1367 (face (rainbow-delimiters-depth-7-face)) 1387 1388 (face (rainbow-delimiters-depth-7-face)) 1388 1389 (face (rainbow-delimiters-depth-6-face)) 1411 1412 (face (rainbow-delimiters-depth-5-face)) 1412 1413 (face (rainbow-delimiters-depth-4-face)) 1413 1414 (face (rainbow-delimiters-depth-3-face)) 1414 1415 (face (rainbow-delimiters-depth-2-face)) 1415 1416 (face (rainbow-delimiters-depth-1-face))) "
" #("
" 0 1 (fontified t)) #("(powerline-raw \"%c] \" mode-line 'l)" 0 1 (face (rainbow-delimiters-depth-9-face) fontified t) 1 15 (fontified t) 15 21 (face font-lock-string-face fontified t) 21 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-9-face) fontified t)) " (powerline-raw (format-mode-line '(3 \"%c] \")) 'l)" #(" (powerline-raw (format-mode-line '(3 \"%c] \")) 'l)" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-9-face)) 2 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 38 (fontified t) 38 44 (fontified t face font-lock-string-face) 44 45 (fontified t face (rainbow-delimiters-depth-2-face)) 45 46 (fontified t face (rainbow-delimiters-depth-1-face)) 46 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-9-face))) "Algebra of Programming" " (λy.y)(λx.xx)(λz.zq)
" "# intermission" "posit" "(eval-after-load 'haskell-mode
          '(define-key haskell-mode-map [f8] 'haskell-navigate-imports))" "https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"))
